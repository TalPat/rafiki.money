{"version":3,"file":"userController.js","sourceRoot":"","sources":["../../../src/controllers/userController.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt'\nimport { Context } from 'koa'\nimport { User } from '../models/user'\nimport { Config, Joi } from 'koa-joi-router'\nimport { AppContext } from '../app'\nimport { SignupSession } from '../models/signupSession'\n\nexport async function show (ctx: AppContext): Promise<void> {\n  ctx.logger.debug('Get me request')\n  ctx.assert(ctx.state.user && ctx.state.user.sub, 401)\n\n  const user = await User.query().where('id', ctx.state.user.sub).first()\n  ctx.assert(user, 404, 'User not found')\n\n  ctx.body = user!.$formatJson()\n}\n\nexport async function store (ctx: AppContext): Promise<void> {\n  const { username, password } = ctx.request.body\n  ctx.logger.debug(`Creating user ${username}`)\n  const salt = await bcrypt.genSalt()\n  const hashedPassword = bcrypt.hashSync(password, salt)\n\n  const usersWithUsername = await User.query().where('userName', username)\n  ctx.assert(usersWithUsername.length === 0, 400, 'Username is already taken.')\n\n  const user = await User.query().insertAndFetch({ username, password: hashedPassword })\n  const expiresAt = (new Date(Date.now() + 1000*30)).getTime()\n  const signupSession = await SignupSession.query().insertAndFetch({userId: user.id, expiresAt})\n  ctx.body = {\n    ...user.$formatJson(),\n    signupSessionId: signupSession.id\n  }\n}\n\nexport async function update (ctx: Context): Promise<void> {\n  const { body } = ctx.request\n  ctx.logger.debug(`Updating user ${ctx.request.params.id}`)\n  const user = await User.query().findById(ctx.request.params.id)\n  ctx.assert(user, 404)\n\n  if (body.password) {\n    const salt = await bcrypt.genSalt()\n    const hashedPassword = bcrypt.hashSync(ctx.request.body.password, salt)\n    await user!.$query().update({ password: hashedPassword })\n  }\n\n  if (body.defaultAccountId) {\n    await user!.$query().update({ defaultAccountId: body.defaultAccountId })\n  }\n\n  ctx.response.status = 200\n}\n\nexport function createValidation (): Config {\n  return {\n    validate: {\n      type: 'json',\n      body: Joi.object().keys({\n        username: Joi.string().required(),\n        password: Joi.string().required()\n      })\n    }\n  }\n}\n"]}