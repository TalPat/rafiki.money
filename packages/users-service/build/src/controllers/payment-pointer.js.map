{"version":3,"file":"payment-pointer.js","sourceRoot":"","sources":["../../../src/controllers/payment-pointer.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppContext } from '../app'\nimport { User } from '../models/user'\nimport { generatePskEncryptionKey, generateSharedSecretFromToken, generateToken } from 'ilp-protocol-stream/src/crypto'\nimport { randomBytes } from 'crypto'\n\nconst INTENTS_URL = process.env.INTENTS_URL || 'http://localhost:3001/intents'\nconst MANDATES_URL = process.env.MANDATES_URL || 'http://localhost:3001/mandates'\nconst SUPPORTED_ASSETS = process.env.SUPPORTED_ASSETS || JSON.stringify(['USD'])\nconst AUTHORIZATION_URL = process.env.AUTHORIZATION_URL || 'http://localhost:9000/oauth2/auth'\nconst ISSUER_URL = process.env.ISSUER_URL || 'http://localhost:9000/'\nconst TOKEN_URL = process.env.TOKEN_URL || 'http://localhost:9000/oauth2/token'\n\nconst STREAM_SERVER_SECRET = process.env.STREAM_SERVER_SECRET ? Buffer.from(process.env.STREAM_SERVER_SECRET, 'hex') : randomBytes(32)\nconst ILP_STREAM_SUBADDRESS = process.env.ILP_STREAM_SUBADDRESS || 'test.wallet'\n\nexport type OAuthServerMetaData = {\n  // Ilp extension to meta data\n  payment_intents_endpoint: string;\n  payment_mandates_endpoint: string;\n  payment_assets_supported: string[];\n  default_account_id: string;\n  // Subset of current meta data specified in RFC8414\n  issuer: string;\n  authorization_endpoint: string;\n  token_endpoint: string;\n  response_types_supported: string[];\n  jwks_uri?: string;\n  registration_endpoint?: string;\n  scopes_supported?: string[];\n  response_modes_supported?: string[];\n  grant_types_supported?: string[];\n  token_endpoint_auth_methods_supported?: string[];\n  service_documentation?: string;\n  token_endpoint_auth_signing_alg_values_supported?: string[];\n  ui_locales_supported?: string;\n  op_policy_uri?: string;\n  op_tos_uri?: string;\n}\n\nconst base64url = (buffer: Buffer) => {\n  return buffer.toString('base64')\n    .replace(/=+$/, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n}\n\nexport async function show (ctx: AppContext): Promise<void> {\n  ctx.logger.debug('Payment pointer request', { path: ctx.request.path })\n  const username = ctx.request.params.username\n  const user = await User.query().where('username', username).first()\n  ctx.assert(user, 404, 'No user found.')\n\n  if (ctx.get('Accept').indexOf('application/spsp4+json') !== -1) {\n    // Determine the payment pointer used and find the account its correlated with\n    const token = base64url(generateToken())\n    const sharedSecret = generateSharedSecretFromToken(STREAM_SERVER_SECRET, Buffer.from(token, 'ascii'))\n\n    if (user && !user.defaultAccountId) {\n      ctx.status = 404\n      return\n    }\n\n    const destinationAccount = `${ILP_STREAM_SUBADDRESS}.${user!.defaultAccountId}.${token}`\n\n    ctx.body = {\n      destination_account: destinationAccount,\n      shared_secret: sharedSecret.toString('base64')\n    }\n    ctx.set('Content-Type', 'application/spsp4+json')\n    ctx.set('Access-Control-Allow-Origin', '*')\n  } else {\n    ctx.body = {\n      payment_intents_endpoint: INTENTS_URL,\n      payment_mandates_endpoint: MANDATES_URL,\n      payment_assets_supported: JSON.parse(SUPPORTED_ASSETS),\n      issuer_endpoint: ISSUER_URL,\n      authorization_endpoint: AUTHORIZATION_URL,\n      token_endpoint: TOKEN_URL\n    }\n  }\n}\n"]}