{"version":3,"file":"consentController.js","sourceRoot":"","sources":["../../../src/controllers/consentController.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { Config, Joi } from 'koa-joi-router'\nimport { AppContext } from '../app'\nimport { hydra } from '../services/hydra'\nimport { accounts } from '../services/accounts'\nimport { Context } from 'koa'\nimport { User } from '../models/user'\n\nconst INTENTS_URL = process.env.INTENTS_URL || 'http://localhost:3001/intents'\nconst MANDATES_URL = process.env.MANDATES_URL || 'http://localhost:3001/mandates'\nconst BASE_PAYMENT_POINTER_URL = process.env.BASE_PAYMENT_POINTER_URL || '$rafiki.money/p'\n\nexport function getAgreementUrlFromScopes (scopes: string[]): string | undefined {\n  const agreementScopes = scopes.filter(scope => {\n    return scope.startsWith('intents.') || scope.startsWith('mandates.')\n  })\n\n  if (agreementScopes.length > 1) {\n    throw new Error('Can only ask for single agreement scope at a time')\n  }\n\n  if (agreementScopes.length === 0) {\n    return undefined\n  }\n\n  return agreementScopes[0].startsWith('intents.')\n    ? INTENTS_URL + '/' + agreementScopes[0].slice(8) : MANDATES_URL + '/' + agreementScopes[0].slice(9)\n}\n\nasync function getUsersPaymentPointer (userId: string): Promise<string> {\n  const user = await User.query().where('id', userId).first()\n  if (!user) {\n    throw new Error('No user found to create mandate scope. userId=' + userId)\n  }\n\n  return `${BASE_PAYMENT_POINTER_URL}/${user.username}`\n}\n\nexport async function generateAccessAndIdTokenInfo (scopes: string[], userId: string, assert: Context['assert'], accountId?: number): Promise<{ accessTokenInfo: { [k: string]: any }; idTokenInfo: { [k: string]: any } }> {\n  const agreementUrl = getAgreementUrlFromScopes(scopes)\n  if (!agreementUrl) {\n    return {\n      accessTokenInfo: {},\n      idTokenInfo: {}\n    }\n  }\n\n  assert(accountId, 400, 'accountId is required when accepting consent for intent/mandate')\n\n  const agreement = await axios.get(agreementUrl).then(resp => resp.data)\n  const usersPaymentPointer = await getUsersPaymentPointer(userId)\n  if (agreement.scope) {\n    assert(agreement.scope === usersPaymentPointer, 401, 'You are not allowed to give consent to this agreement.')\n  }\n\n  const updateScopeData = { accountId, userId }\n  if (agreementUrl.match(/mandate/)) {\n    updateScopeData['scope'] = usersPaymentPointer\n  }\n  const updatedAgreement = await axios.patch(agreementUrl, updateScopeData).then(resp => resp.data)\n\n  return {\n    accessTokenInfo: {\n      interledger: {\n        agreement: updatedAgreement\n      }\n    },\n    idTokenInfo: {\n      interledger: {\n        agreement: updatedAgreement\n      }\n    }\n  }\n}\n\nexport async function show (ctx: AppContext): Promise<void> {\n  const challenge = ctx.request.query['consent_challenge']\n  ctx.logger.debug('Getting consent request', { challenge })\n\n  const consentRequest = await hydra.getConsentRequest(challenge).catch(error => {\n    ctx.logger.error(error, 'error in login request')\n    throw error\n  })\n  ctx.logger.debug('Got hydra consent request', { consentRequest })\n\n  if (consentRequest['skip'] || consentRequest['client'].client_id === 'frontend-client' || consentRequest['client'].client_id === 'wallet-gui-service') {\n    const acceptConsent = await hydra.acceptConsentRequest(challenge, {\n      remember: true,\n      remember_for: 0,\n      grant_scope: consentRequest['requested_scope'],\n      grant_access_token_audience: consentRequest['requested_access_token_audience'],\n      session: {\n        // // This data will be available when introspecting the token. Try to avoid sensitive information here,\n        // // unless you limit who can introspect tokens.\n        // access_token: accessTokenInfo,\n        //\n        // // This data will be available in the ID token.\n        // id_token: idTokenInfo\n      }\n    }).catch(error => {\n      ctx.logger.error('Error with hydra accepting consent', { error })\n      throw error\n    })\n\n    ctx.body = {\n      redirectTo: acceptConsent['redirect_to']\n    }\n    return\n  }\n\n  const grantScopes: string[] = Array.from(consentRequest['requested_scope'])\n  const agreementUrl = getAgreementUrlFromScopes(grantScopes)\n  ctx.logger.debug('grantScopes and agreementUrl', { grantScopes, agreementUrl })\n\n  let accountList = undefined\n  if(agreementUrl) {\n    const token = await ctx.tokenService.getAccessToken()\n    ctx.logger.debug('access token', { token })\n\n    accountList = await accounts.getUserAccounts(consentRequest['subject'], token)\n    ctx.logger.debug('Got account list', { accountList })\n  }\n\n  ctx.body = {\n    requestedScopes: consentRequest['requested_scope'],\n    client: consentRequest['client'], // TODO we should probably not leak all this data to the frontend\n    user: consentRequest['subject'],\n    accounts: accountList,\n    agreementUrl\n  }\n}\n\nexport async function store (ctx: AppContext): Promise<void> {\n  const challenge = ctx.request.query['consent_challenge']\n  const { accepts, scopes, accountId } = ctx.request.body\n  ctx.logger.debug('Post consent request', { body: ctx.request.body, challenge })\n\n  if (!accepts) {\n    const rejectConsent = await hydra.rejectConsentRequest(challenge, {\n      error: 'access_denied',\n      error_description: 'The resource owner denied the request'\n    }).catch(error => {\n      ctx.logger.error('error rejecting hydra consent')\n      throw error\n    })\n\n    ctx.body = {\n      redirectTo: rejectConsent['redirect_to']\n    }\n    return\n  }\n\n  const consentRequest = await hydra.getConsentRequest(challenge)\n  ctx.logger.debug('consent request from hydra', { consentRequest })\n\n  const { accessTokenInfo, idTokenInfo } = await generateAccessAndIdTokenInfo(scopes, consentRequest['subject'], ctx.assert, accountId)\n  ctx.logger.debug('Making accept request to hydra', { accessTokenInfo, idTokenInfo })\n  const acceptConsent = await hydra.acceptConsentRequest(challenge, {\n    remember: true,\n    remember_for: 0,\n    grant_scope: scopes,\n    grant_access_token_audience: consentRequest['requested_access_token_audience'],\n    session: {\n      // This data will be available when introspecting the token. Try to avoid sensitive information here,\n      // unless you limit who can introspect tokens.\n      access_token: accessTokenInfo,\n\n      // This data will be available in the ID token.\n      id_token: idTokenInfo\n    }\n  }).catch(error => {\n    ctx.logger.error('Error with hydra accepting consent', { error })\n    throw error\n  })\n\n  ctx.body = {\n    redirectTo: acceptConsent['redirect_to']\n  }\n}\n\nexport function getValidation (): Config {\n  return {\n    validate: {\n      query: {\n        consent_challenge: Joi.string().required().error(new Error('consent_challenge is required.'))\n      }\n    }\n  }\n}\n\nexport function storeValidation (): Config {\n  return {\n    validate: {\n      type: 'json',\n      body: {\n        accepts: Joi.bool().required(),\n        scopes: Joi.array().items(Joi.string()).required(),\n        accountId: Joi.number().integer().greater(0).optional()\n      },\n      query: {\n        consent_challenge: Joi.string().required().error(new Error('consent_challenge is required.'))\n      }\n    }\n  }\n}\n"]}