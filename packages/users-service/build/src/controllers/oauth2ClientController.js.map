{"version":3,"file":"oauth2ClientController.js","sourceRoot":"","sources":["../../../src/controllers/oauth2ClientController.ts"],"names":[],"mappings":";;AAAA,mDAA4C;AAE5C,6CAAyC;AAElC,KAAK,UAAU,KAAK,CAAE,GAAe;IAC1C,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,gCAAgC,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;IAC7E,MAAM,aAAa,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAA;IAEtC,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,aAAK,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAA;QAC3D,GAAG,CAAC,IAAI,GAAG,MAAM,CAAA;KAClB;IAAC,OAAO,KAAK,EAAE;QACd,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;QAC3F,GAAG,CAAC,MAAM,GAAG,GAAG,CAAA;QAChB,GAAG,CAAC,OAAO,GAAG,8CAA8C,CAAA;KAC7D;AACH,CAAC;AAZD,sBAYC;AAED,SAAgB,gBAAgB;IAC9B,OAAO;QACL,QAAQ,EAAE;YACR,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,oBAAG,CAAC,MAAM,CAAC;gBACf,SAAS,EAAE,oBAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBAClC,WAAW,EAAE,oBAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBACpC,KAAK,EAAE,oBAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBAC9B,QAAQ,EAAE,oBAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;gBACjC,cAAc,EAAE,oBAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,oBAAG,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;gBAC1D,WAAW,EAAE,oBAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,oBAAG,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;gBACvD,aAAa,EAAE,oBAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,oBAAG,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;gBACzD,0BAA0B,EAAE,oBAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;aACpD,CAAC;SACH;KACF,CAAA;AACH,CAAC;AAhBD,4CAgBC","sourcesContent":["import { Config, Joi } from 'koa-joi-router'\nimport { AppContext } from '../app'\nimport { hydra } from '../services/hydra'\n\nexport async function store (ctx: AppContext): Promise<void> {\n  ctx.logger.info('Register Oauth2 client request', { body: ctx.request.body })\n  const clientDetails = ctx.request.body\n\n  try {\n    const client = await hydra.createOauthClient(clientDetails)\n    ctx.body = client\n  } catch (error) {\n    ctx.logger.error('Could not register client on oauth provider.', { error: error.response })\n    ctx.status = 500\n    ctx.message = 'Could not register client on oauth provider.'\n  }\n}\n\nexport function createValidation (): Config {\n  return {\n    validate: {\n      type: 'json',\n      body: Joi.object({\n        client_id: Joi.string().required(),\n        client_name: Joi.string().optional(),\n        scope: Joi.string().optional(),\n        logo_uri: Joi.string().optional(),\n        response_types: Joi.array().items(Joi.string()).optional(),\n        grant_types: Joi.array().items(Joi.string()).optional(),\n        redirect_uris: Joi.array().items(Joi.string()).optional(),\n        token_endpoint_auth_method: Joi.string().optional()\n      })\n    }\n  }\n}\n"]}