{"version":3,"file":"loginController.js","sourceRoot":"","sources":["../../../src/controllers/loginController.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt'\nimport { Context } from 'koa'\nimport { Config, Joi } from 'koa-joi-router'\nimport { User } from '../models/user'\nimport { hydra } from '../../src/services/hydra'\nimport { AppContext } from '../app'\nimport { SignupSession } from '../models/signupSession'\n\nexport async function show (ctx: AppContext): Promise<void> {\n  const challenge = ctx.request.query.login_challenge\n\n  ctx.logger.debug('Get login request', { challenge })\n  const loginRequest = await hydra.getLoginRequest(challenge).catch(error => {\n    ctx.logger.error(error, 'error in login request')\n    throw error\n  })\n\n  const requestUrl = new URL(loginRequest['request_url'])\n  const signupSessionId = requestUrl.searchParams.get('signupSessionId')\n\n  const session = signupSessionId ? await SignupSession.query().where('id', signupSessionId).first() : null\n  // Auto login users if they just signed up\n  if (session) {\n    const now = Date.now()\n    if(session.expiresAt > now) {\n      const acceptLogin = await hydra.acceptLoginRequest(challenge, { subject: session.userId,\n        remember: true,\n        remember_for: 604800 // 1 week\n      }).catch(error => {\n        ctx.logger.error(error, 'error in accept login request')\n        throw error\n      })\n      ctx.status = 200\n      ctx.body = { redirectTo: acceptLogin['redirect_to'] }\n      return\n    }\n  }\n\n  if (loginRequest['skip']) {\n    const acceptLogin = await hydra.acceptLoginRequest(challenge, { subject: loginRequest['subject'],\n      remember: true,\n      remember_for: 604800 // 1 week\n    }).catch(error => {\n      ctx.logger.error(error, 'error in accept login request')\n      throw error\n    })\n    ctx.status = 200\n    ctx.body = { redirectTo: acceptLogin['redirect_to'] }\n    return\n  }\n\n  ctx.status = 200\n  ctx.body = { redirectTo: null }\n}\n\nexport async function store (ctx: Context): Promise<void> {\n  const { username, password } = ctx.request.body\n  const challenge = ctx.request.query.login_challenge\n  ctx.logger.debug('Post login request', { username: username, challenge })\n\n  const user = await User.query().where('username', username).first()\n  ctx.assert(user, 401, 'Invalid username or password.')\n\n  ctx.assert(await bcrypt.compare(password, user!.password), 401, 'Invalid username or password.')\n\n  const acceptLogin = await hydra.acceptLoginRequest(challenge, {\n    subject: user!.id.toString(),\n    remember: true,\n    remember_for: 604800 // 1 week\n  }).catch(error => {\n    ctx.logger.error(error, 'error in accept login request')\n    throw error\n  })\n\n  ctx.body = {\n    redirectTo: acceptLogin['redirect_to']\n  }\n}\n\nexport function createValidation (): Config {\n  return {\n    validate: {\n      type: 'json',\n      query: {\n        login_challenge: Joi.string().required().error(new Error('login_challenge is required.'))\n      },\n      body: Joi.object({\n        username: Joi.string().required(),\n        password: Joi.string().required()\n      })\n    }\n  }\n}\n\nexport function getValidation (): Config {\n  return {\n    validate: {\n      query: {\n        login_challenge: Joi.string().required().error(new Error('login_challenge is required.'))\n      }\n    }\n  }\n}\n"]}