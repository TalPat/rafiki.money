{"version":3,"file":"auth.js","sourceRoot":"","sources":["../../../src/middleware/auth.ts"],"names":[],"mappings":";;AAGA,SAAgB,oBAAoB,CAAE,KAAe;IACnD,OAAO,KAAK,EAAE,GAAe,EAAE,IAAwB,EAAiB,EAAE;QACxE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAA;QACtB,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;QAChD,IAAI,KAAK,GAAG,EAAE,CAAA;QAGd,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE;YAClC,MAAM,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;YAC7C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC/C,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;aACjB;SACF;QAED,GAAG,CAAC,MAAM,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,EAAE,EAAE,GAAG,EAAE,sBAAsB,CAAC,CAAA;QAElF,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAA;QAErD,MAAM,aAAa,GAAG,MAAM,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACrE,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAA;YACvE,MAAM,KAAK,CAAA;QACb,CAAC,CAAC,CAAA;QACF,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,oBAAoB,EAAE,EAAE,aAAa,EAAE,CAAC,CAAA;QACzD,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACzB,GAAG,CAAC,MAAM,GAAG,GAAG,CAAA;YAChB,OAAM;SACP;QAGD,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,aAAa,CAAA;QAE9B,MAAM,IAAI,EAAE,CAAA;IACd,CAAC,CAAA;AACH,CAAC;AAjCD,oDAiCC","sourcesContent":["import { AppContext } from '../app'\nimport { HydraApi } from '../services/hydra'\n\nexport function createAuthMiddleware (hydra: HydraApi) {\n  return async (ctx: AppContext, next: () => Promise<any>): Promise<void> => {\n    const { header } = ctx\n    ctx.logger.debug('Auth middleware.', { header })\n    let token = ''\n\n    // Get token out of header\n    if (header && header.authorization) {\n      const parts = header.authorization.split(' ')\n      if (parts.length === 2 && parts[0] === 'Bearer') {\n        token = parts[1]\n      }\n    }\n\n    ctx.assert(typeof token === 'string' && token !== '', 401, 'No auth token found.')\n\n    ctx.logger.debug('Auth middleware. token', { token })\n    // Introspect it\n    const introspection = await hydra.introspectToken(token).catch(error => {\n      ctx.logger.error('error introspecting token', { errorResponse: error })\n      throw error\n    })\n    ctx.logger.debug('Introspected token', { introspection })\n    if (!introspection.active) {\n      ctx.status = 401\n      return\n    }\n\n    // Assign userId from token sub to ctx.user\n    ctx.state.user = introspection\n\n    await next()\n  }\n}\n"]}