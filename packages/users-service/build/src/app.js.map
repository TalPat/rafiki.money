{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,8CAAkC;AAElC,oEAAqD;AACrD,oEAAuC;AACvC,qDAA4B;AAE5B,4CAAmD;AACnD,8EAA+D;AAC/D,+EAAgE;AAChE,iFAAkE;AAClE,mFAAoE;AACpE,wFAAyE;AACzE,6FAA8E;AAC9E,4CAAwD;AAKxD,MAAa,GAAG;IAKd,YAAa,MAAc,EAAE,YAA0B;QACrD,IAAI,CAAC,IAAI,GAAG,IAAI,aAAG,EAAmB,CAAA;QACtC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,YAAY,CAAA;QAC7C,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAA;QACjC,IAAI,CAAC,OAAO,GAAG,wBAAY,EAAE,CAAA;QAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAI,EAAE,CAAC,CAAA;QACrB,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAU,EAAE,CAAC,CAAA;QAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAA;IAC1C,CAAC;IAEM,MAAM,CAAE,IAAqB;QAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IACvC,CAAC;IAEM,QAAQ;QACb,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;SACrB;IACH,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,gBAAgB,EAAE,EAAE,eAAe,CAAC,KAAK,CAAC,CAAA;QACtF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,eAAe,CAAC,MAAM,CAAC,CAAA;QACxD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,2BAAoB,CAAC,aAAK,CAAC,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAA;QAElF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAe,CAAC,aAAa,EAAE,EAAE,eAAe,CAAC,IAAI,CAAC,CAAA;QACjF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,gBAAgB,EAAE,EAAE,eAAe,CAAC,KAAK,CAAC,CAAA;QAEtF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,gBAAgB,CAAC,KAAK,CAAC,CAAA;QAEpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,iBAAiB,CAAC,aAAa,EAAE,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACvF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,CAAC,eAAe,EAAE,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAA;QAE3F,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,wBAAwB,CAAC,IAAI,CAAC,CAAA;QAE/D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,sBAAsB,CAAC,gBAAgB,EAAE,EAAE,sBAAsB,CAAC,KAAK,CAAC,CAAA;IAC/G,CAAC;CACF;AA3CD,kBA2CC","sourcesContent":["import Koa, { Context } from 'koa'\nimport { Logger } from 'pino'\nimport createRouter, { Router } from 'koa-joi-router'\nimport bodyParser from 'koa-bodyparser'\nimport cors from '@koa/cors'\nimport { Server } from 'http'\nimport { hydra, TokenInfo } from './services/hydra'\nimport * as UsersController from './controllers/userController'\nimport * as LoginController from './controllers/loginController'\nimport * as LogoutController from './controllers/logoutController'\nimport * as ConsentController from './controllers/consentController'\nimport * as PaymentPointerController from './controllers/payment-pointer'\nimport * as Oauth2ClientController from './controllers/oauth2ClientController'\nimport { createAuthMiddleware } from './middleware/auth'\nimport { TokenService } from './services/token-service'\n\nexport type AppContext<T = any> = Koa.ParameterizedContext<T, { logger: Logger; tokenService: TokenService }>\n\nexport class App {\n  private _koa: Koa\n  private _router: Router\n  private _server: Server\n\n  constructor (logger: Logger, tokenService: TokenService) {\n    this._koa = new Koa<any, AppContext>()\n    this._koa.context.tokenService = tokenService\n    this._koa.context.logger = logger\n    this._router = createRouter()\n    this._koa.use(cors())\n    this._setupRoutes()\n    this._koa.use(bodyParser())\n    this._koa.use(this._router.middleware())\n  }\n\n  public listen (port: number | string): void {\n    this._server = this._koa.listen(port)\n  }\n\n  public shutdown (): void {\n    if (this._server) {\n      this._server.close()\n    }\n  }\n\n  private _setupRoutes (): void {\n    this._router.post('/users', UsersController.createValidation(), UsersController.store)\n    this._router.patch('/users/:id', UsersController.update)\n    this._router.get('/users/me', [createAuthMiddleware(hydra), UsersController.show])\n\n    this._router.get('/login', LoginController.getValidation(), LoginController.show)\n    this._router.post('/login', LoginController.createValidation(), LoginController.store)\n\n    this._router.post('/logout', LogoutController.store)\n\n    this._router.get('/consent', ConsentController.getValidation(), ConsentController.show)\n    this._router.post('/consent', ConsentController.storeValidation(), ConsentController.store)\n\n    this._router.get('/p/:username', PaymentPointerController.show)\n\n    this._router.post('/oauth2/clients', Oauth2ClientController.createValidation(), Oauth2ClientController.store)\n  }\n}\n"]}