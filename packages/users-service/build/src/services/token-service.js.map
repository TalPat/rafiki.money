{"version":3,"file":"token-service.js","sourceRoot":"","sources":["../../../src/services/token-service.ts"],"names":[],"mappings":";;AAAA,iDAAwD;AASxD,MAAa,YAAY;IASvB,YAAa,MAA0B;QACrC,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,CAAA;QAClC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAA;QAChC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,CAAA;QACxC,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,CAAA;QAChD,IAAI,CAAC,KAAK,EAAE,CAAA;IACd,CAAC;IAED,KAAK,CAAC,KAAK;QACT,MAAM,MAAM,GAAG,MAAM,sBAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;QAErD,IAAI,CAAC,OAAO,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC;YAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,IAAG,CAAC,IAAI,CAAC,OAAO,EAAE;YAChB,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;SACnB;QACD,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE;gBACzC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;oBACjB,UAAU,EAAE,oBAAoB;iBACjC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAe,EAAE,EAAE;oBAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;oBACnB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAA;oBACtC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;gBACnC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAU,EAAE,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC,CAAC,CAAA;aAC5C;iBAAM;gBACL,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;aAClC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AA5CD,oCA4CC","sourcesContent":["import { Client, Issuer, TokenSet } from 'openid-client'\n\nexport type TokenServiceConfig = {\n  issuerUrl: string;\n  clientId: string;\n  clientSecret: string;\n  tokenRefreshTime: number;\n}\n\nexport class TokenService {\n  private _issuerUrl: string\n  private _clientId: string\n  private _clientSecret: string\n  private _tokenRefreshTime: number\n  private _client: Client\n\n  private _token: TokenSet\n\n  constructor (config: TokenServiceConfig) {\n    this._issuerUrl = config.issuerUrl\n    this._clientId = config.clientId\n    this._clientSecret = config.clientSecret\n    this._tokenRefreshTime = config.tokenRefreshTime\n    this.setup()\n  }\n\n  async setup () {\n    const issuer = await Issuer.discover(this._issuerUrl)\n\n    this._client = new issuer.Client({\n      client_id: this._clientId,\n      client_secret: this._clientSecret\n    })\n  }\n\n  async getAccessToken (): Promise<string> {\n    if(!this._client) {\n      await this.setup()\n    }\n    return new Promise<string>((resolve, reject) => {\n      if (!this._token || this._token.expired()) {\n        this._client.grant({\n          grant_type: 'client_credentials'\n        }).then((token: TokenSet) => {\n          this._token = token\n          console.log('token from hydra', token)\n          resolve(this._token.access_token)\n        }).catch((error: any) => { reject(error) })\n      } else {\n        resolve(this._token.access_token)\n      }\n    })\n  }\n}\n"]}