{"version":3,"file":"hydra.js","sourceRoot":"","sources":["../../../src/services/hydra.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosResponse } from 'axios'\nimport got from 'got'\n\nconst hydraAdminUrl = process.env.HYDRA_ADMIN_URL || 'http://localhost:9001'\nlet mockTlsTermination = {}\nconst MOCK_TLS_TERMINATION = process.env.MOCK_TLS_TERMINATION || 'true'\nif (MOCK_TLS_TERMINATION === 'true') {\n  mockTlsTermination = {\n    'X-Forwarded-Proto': 'https'\n  }\n}\n\ntype Flow = 'login' | 'consent' | 'logout'\ntype Action = 'accept' | 'reject'\n\n// A little helper that takes type (can be \"login\" or \"consent\") and a challenge and returns the response from ORY Hydra.\nfunction get (flow: Flow, challenge: string): Promise<AxiosResponse> {\n  const url = new URL('/oauth2/auth/requests/' + flow, hydraAdminUrl)\n  url.searchParams.set(`${flow}_challenge`, challenge)\n  return axios.get(url.toString(), {\n    headers: mockTlsTermination,\n    timeout: 5000\n  }).then(res => {\n    return res.data\n  })\n}\n\n// A little helper that takes type (can be \"login\" or \"consent\"), the action (can be \"accept\" or \"reject\") and a challenge and returns the response from ORY Hydra.\nfunction put (flow: Flow, action: Action, challenge: string, body: any): Promise<AxiosResponse> {\n  const url = new URL('/oauth2/auth/requests/' + flow + '/' + action, hydraAdminUrl)\n  url.searchParams.set(`${flow}_challenge`, challenge)\n  const headers = Object.assign(mockTlsTermination, { 'content-type': 'application/json' })\n  return axios.put(url.toString(), body, {\n    headers,\n    timeout: 5000\n  }).then(res => res.data)\n}\n\nexport type Oauth2ClientDetails = {\n  client_id: string;\n  client_name: string;\n  scope: string;\n  response_types: string[];\n  grant_types: string[];\n  redirect_uris: string[];\n  logo_uri: string;\n}\n\nexport interface HydraApi {\n  introspectToken: (token: string) => Promise<any>;\n  getLoginRequest: (challenge: string) => Promise<AxiosResponse>;\n  acceptLoginRequest: (challenge: string, body: any) => Promise<AxiosResponse>;\n  rejectLoginRequest: (challenge: string, body: any) => Promise<AxiosResponse>;\n  getConsentRequest: (challenge: string) => Promise<AxiosResponse>;\n  acceptConsentRequest: (challenge: string, body: any) => Promise<AxiosResponse>;\n  rejectConsentRequest: (challenge: string, body: any) => Promise<AxiosResponse>;\n  getLogoutRequest: (challenge: string) => Promise<AxiosResponse>;\n  acceptLogoutRequest: (challenge: string) => Promise<AxiosResponse>;\n  rejectLogoutRequest: (challenge: string) => Promise<AxiosResponse>;\n  createOauthClient: (clientDetails: Oauth2ClientDetails) => Promise<AxiosResponse>;\n}\n\nexport const hydra: HydraApi = {\n  // Fetches information on a login request.\n  getLoginRequest: async function (challenge: string): Promise<AxiosResponse> {\n    return get('login', challenge)\n  },\n  // Accepts a login request.\n  acceptLoginRequest: async function (challenge: string, body: any): Promise<AxiosResponse> {\n    return put('login', 'accept', challenge, body)\n  },\n  // Rejects a login request.\n  rejectLoginRequest: async function (challenge: string, body: any): Promise<AxiosResponse> {\n    return put('login', 'reject', challenge, body)\n  },\n  // Fetches information on a consent request.\n  getConsentRequest: async function (challenge: string): Promise<AxiosResponse> {\n    return get('consent', challenge)\n  },\n  // Accepts a consent request.\n  acceptConsentRequest: async function (challenge: string, body: any): Promise<AxiosResponse> {\n    return put('consent', 'accept', challenge, body)\n  },\n  // Rejects a consent request.\n  rejectConsentRequest: async function (challenge: string, body: any): Promise<AxiosResponse> {\n    return put('consent', 'reject', challenge, body)\n  },\n  // Fetches information on a logout request.\n  getLogoutRequest: async function (challenge: string): Promise<AxiosResponse> {\n    return get('logout', challenge)\n  },\n  // Accepts a logout request.\n  acceptLogoutRequest: async function (challenge: string): Promise<AxiosResponse> {\n    return put('logout', 'accept', challenge, {})\n  },\n  // Reject a logout request.\n  rejectLogoutRequest: async function (challenge: string): Promise<AxiosResponse> {\n    return put('logout', 'reject', challenge, {})\n  },\n  introspectToken: function (token: string) {\n    const url = new URL('/oauth2/introspect', hydraAdminUrl)\n    const headers = Object.assign({ 'Content-Type': 'application/x-www-form-urlencoded' }, mockTlsTermination)\n    const body = (new URLSearchParams({ token })).toString()\n    console.log('in introspect token: ', token, ' typeof token', typeof token)\n    const instance = got.extend({\n      hooks: {\n        beforeRequest: [\n          options => {\n            console.log('headers before going out', options.headers)\n            console.log('body before going out', options.body)\n            if (options.headers) {\n              options.headers['content-type'] = 'application/x-www-form-urlencoded'\n            }\n          }\n        ]\n      }\n    })\n\n    return instance.post(url.toString(), { body, headers }).then(resp => JSON.parse(resp.body))\n  },\n  createOauthClient: async function (clientDetails: Oauth2ClientDetails): Promise<AxiosResponse> {\n    const url = new URL('/clients', hydraAdminUrl)\n    const headers = Object.assign({ 'Content-Type': 'application/json' }, mockTlsTermination)\n    return axios.post(url.toString(), clientDetails, { headers }).then(resp => resp.data)\n  }\n}\nexport interface TokenInfo {\n  active: boolean;\n  scope?: string;\n  client_id?: string;\n  username?: string;\n  token_type?: string;\n  exp?: number;\n  iat?: number;\n  nbf?: number;\n  sub?: string;\n  aud?: string;\n  iss?: string;\n  jti?: string;\n}\n"]}