{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../test/db/index.ts"],"names":[],"mappings":";;;;;AAAA,gDAAuB;AACvB,yCAAiC;AACjC,MAAM,UAAU,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAA;AAE/B,QAAA,eAAe,GAAG,KAAK,IAAmB,EAAE;IACvD,MAAM,IAAI,GAAG,cAAI,CAAC;QAChB,GAAG,UAAU,CAAC,OAAO;KACtB,CAAC,CAAA;IAGF,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;IAC7C,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;IAK3B,iBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAEhB,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["import Knex from 'knex'\nimport { Model } from 'objection'\nconst knexConfig = require('../../knexfile') // eslint-disable-line @typescript-eslint/no-var-requires\n\nexport const refreshDatabase = async (): Promise<Knex> => {\n  const knex = Knex({\n    ...knexConfig.testing\n  })\n\n  // Create or migrate:\n  await knex.migrate.rollback(knexConfig, true)\n  await knex.migrate.latest()\n\n  // // Bind all Models to a knex instance. If you only have one database in\n  // // your server this is all you have to do. For multi database systems, see\n  // // the Model.bindKnex method.\n  Model.knex(knex)\n\n  return knex\n}\n"]}