{"version":3,"file":"agreementBucket.test.js","sourceRoot":"","sources":["../../../test/services/agreementBucket.test.ts"],"names":[],"mappings":"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","sourcesContent":["import {Agreement, App} from \"../../src\";\nimport { AgreementBucket } from \"../../src/services/agreementBucket\"\nconst MockRedis = require('ioredis-mock')\n\n\n\ndescribe('Agreement Bucket', () => {\n  let agreement: Agreement\n  let agreementBucket: AgreementBucket\n  let mockRedis = MockRedis\n\n  describe('Handle a basic agreement that only has an amount specific', () => {\n    beforeEach(async () => {\n      mockRedis = new MockRedis()\n      agreementBucket = new AgreementBucket(mockRedis)\n      agreement = new Agreement()\n      agreement.amount = '100'\n      agreement.id = '123'\n      agreement.start = Date.now()\n    })\n\n    test(\n      'Can take amount if funds available if available for current interval',\n      async () => {\n        let didThrow = false\n        await agreementBucket.take(agreement, 50).catch(error => {\n          console.log(error)\n          didThrow = true\n        })\n        expect(didThrow).toBe(false)\n      }\n    )\n\n    test('Can take, return and retake amount within mandate', async () => {\n      let didThrow = false\n      await agreementBucket.take(agreement, 50).catch(error => {\n        console.log(error)\n        didThrow = true\n      })\n      await agreementBucket.take(agreement, -50).catch(error => {\n        console.log(error)\n        didThrow = true\n      })\n      await agreementBucket.take(agreement, 100).catch(error => {\n        console.log(error)\n        didThrow = true\n      })\n      expect(didThrow).toBe(false)\n    })\n\n    test(\n      'Throws error if try to take more than available for interval',\n      async () => {\n        let didThrow = false\n        await agreementBucket.take(agreement, 101).catch(error => {\n          didThrow = true\n        })\n        expect(didThrow).toBe(true)\n      }\n    )\n\n    test('Throws if trying to pull after expiry', async () => {\n      agreement.expiry = Date.now()\n      let didThrow = false\n\n      await agreementBucket.take(agreement, 50).catch(error => {\n        didThrow = true\n      })\n\n      expect(didThrow).toBe(true)\n    })\n\n    test('can show how much is left in the bucket', async () => {\n      let didThrow = false\n\n      await agreementBucket.take(agreement, 24).catch(error => {\n        didThrow = true\n      })\n\n      expect(await agreementBucket.getFillLevel(agreement)).toEqual(24)\n      expect(didThrow).toBe(false)\n    })\n\n    describe('Cycles', () => {\n      let clock: any\n\n      beforeEach(() => {\n        agreement = new Agreement()\n        agreement.cycles = 2\n        agreement.interval = 'P1D'\n        agreement.amount = '100'\n        agreement.id = '123'\n        agreement.start = Date.now()\n      })\n      afterEach(() => {\n      })\n\n      test(\n        'Fails if pulled to much in this cycle but will succeed when pulling in next cycle',\n        async () => {\n          //Take three times from this cycle\n          const take1 = await agreementBucket.take(agreement, 50).then(() => true).catch(error => {\n            return false\n          })\n          const take2 = await agreementBucket.take(agreement, 50).then(() => true).catch(error => {\n            console.log(error)\n            return false\n          })\n          const take3 = await agreementBucket.take(agreement, 50).then(() => true).catch(error => {\n            return false\n          })\n\n          expect(take1).toBe(true)\n          expect(take2).toBe(true)\n          expect(take3).toBe(false)\n\n          // Tick 25hrs\n          const now = Date.now()\n          Date.now = jest.fn(() => now + 25*60*60*1000)\n          //Take three times from this cycle\n          const take1Cycle2 = await agreementBucket.take(agreement, 50).then(() => true).catch(error => {\n            return false\n          })\n          const take2Cycle2 = await agreementBucket.take(agreement, 50).then(() => true).catch(error => {\n            return false\n          })\n          const take3Cycle2 = await agreementBucket.take(agreement, 50).then(() => true).catch(error => {\n            return false\n          })\n\n          expect(take1Cycle2).toBe(true)\n          expect(take2Cycle2).toBe(true)\n          expect(take3Cycle2).toBe(false)\n        }\n      )\n\n      test('shows balance for current interval', async () => {\n        //Take three times from this cycle\n        const take1 = await agreementBucket.take(agreement, 49).then(() => true).catch(error => {\n          return false\n        })\n\n\n        expect(take1).toBe(true)\n        expect(await agreementBucket.getFillLevel(agreement)).toEqual(49)\n\n        // Tick 25hrs\n        const now = Date.now()\n        Date.now = jest.fn(() => now + 25*60*60*1000)\n\n        expect(await agreementBucket.getFillLevel(agreement)).toEqual(0)\n\n        //Take three times from this cycle\n        const take1Cycle2 = await agreementBucket.take(agreement, 49).then(() => true).catch(error => {\n          return false\n        })\n\n        expect(take1Cycle2).toBe(true)\n        expect(await agreementBucket.getFillLevel(agreement)).toEqual(49)\n      })\n\n    })\n  })\n})\n"]}