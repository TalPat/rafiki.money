{"version":3,"file":"crud.test.js","sourceRoot":"","sources":["../../../../test/api/intents/crud.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { randomBytes } from 'crypto'\nimport { createHmac } from 'crypto'\nimport { App, Agreement } from '../../../src'\nimport {AgreementBucketMock} from \"../../mocks/agreementBucketMock\"\nimport {refreshDatabase} from \"../../db\"\nimport Knex = require(\"knex\")\n\nconst agreementBucketMock = new AgreementBucketMock()\n\ndescribe('Intent creation', () => {\n\n  let app: App\n  let db: Knex\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucketMock)\n    app.listen(4000)\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete() // clean up db after test\n    await db.destroy()\n  })\n\n  test(\n    'uses a 32 byte salt to create a hash of the given secret for an un-managed intent',\n    async () => {\n      const secret = randomBytes(32).toString('base64')\n      expect(await Agreement.query()).toEqual([])\n\n      const { headers, status, data } = await axios.post('http://localhost:4000/intents', {\n        scope: \"$wallet.example/alice\",\n        secret,\n        asset: {\n          scale: 2,\n          code: 'USD',\n        }\n      })\n\n      expect(status).toEqual(201)\n      expect(headers['location']).toEqual(`http://localhost:4000/intents/${data.id}`)\n      expect(typeof data.secretSalt).toBe('string')\n      expect(Buffer.from(data.secretSalt, 'base64').length).toBe(32)\n      const hmacSecret = createHmac('SHA256', data.secretSalt).update(secret).digest().toString('base64')\n      expect(data.secretHash).toEqual(hmacSecret)\n      expect(data.asset).toEqual({ scale: 2, code: 'USD' })\n      expect(data.scope).toEqual(\"$wallet.example/alice\")\n      expect(data.amount).not.toBeDefined()\n      expect(data.callback).not.toBeDefined()\n      expect((await Agreement.query().first())!.isMandate()).toBe(false)\n    }\n  )\n\n  test(\n    'does not hash a secret when a callback is specified for a managed intent',\n    async () => {\n      expect(await Agreement.query()).toEqual([])\n\n      const { headers, status, data } = await axios.post('http://localhost:4000/intents', {\n        scope: \"$wallet.example/alice\",\n        callback: 'http://localhost:3001/ilpcallback',\n        asset: {\n          scale: 2,\n          code: 'USD',\n        }\n      })\n\n      expect(status).toEqual(201)\n      expect(headers['location']).toEqual(`http://localhost:4000/intents/${data.id}`)\n      expect(data.callback).toEqual('http://localhost:3001/ilpcallback')\n      expect(data.asset).toEqual({ scale: 2, code: 'USD' })\n      expect(data.scope).toEqual(\"$wallet.example/alice\")\n      expect(data.amount).not.toBeDefined()\n      expect(data.secretHash).not.toBeDefined()\n      expect(data.secretSalt).not.toBeDefined()\n      expect((await Agreement.query().first())!.isMandate()).toBe(false)\n    }\n  )\n\n  test(\n    'returns the destination as <configured address>.intents.<intent id>',\n    async () => {\n      expect(await Agreement.query()).toEqual([])\n\n      const { data } = await axios.post('http://localhost:4000/intents', {\n        scope: \"$wallet.example/alice\",\n        callback: 'http://localhost:3001/ilpcallback',\n        asset: {\n          scale: 2,\n          code: 'USD',\n        }\n      })\n\n      expect(data.destination).toEqual(`test.wallet.intents.${data.id}`)\n    }\n  )\n\n  test('returns 400 when callback and secret are specified', async () => {\n    expect(await Agreement.query()).toEqual([])\n    const secret = randomBytes(32).toString('base64')\n\n    try {\n      await axios.post('http://localhost:4000/intents', {\n        scope: \"$wallet.example/alice\",\n        secret,\n        callback: 'http://localhost:3001/ilpcallback',\n        asset: {\n          scale: 2,\n          code: 'USD',\n        }\n      })\n    } catch (error) {\n      expect(error.response.status).toEqual(400)\n      expect(error.response.data).toEqual('Specify either callback or secret.')\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n\n  test('returns 400 when neither callback or secret are specified', async () => {\n    expect(await Agreement.query()).toEqual([])\n\n    try {\n      await axios.post('http://localhost:4000/intents', {\n        scope: \"$wallet.example/alice\",\n        asset: {\n          scale: 2,\n          code: 'USD',\n        }\n      })\n    } catch (error) {\n      expect(error.response.status).toEqual(400)\n      expect(error.response.data).toEqual('Specify either callback or secret.')\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n})\n"]}