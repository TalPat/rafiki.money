{"version":3,"file":"show.test.js","sourceRoot":"","sources":["../../../../test/api/intents/show.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { createHmac } from 'crypto'\nimport { App, Agreement } from '../../../src'\nimport { AgreementBucket } from '../../../src/services/agreementBucket'\nimport Knex from \"knex\"\nimport {refreshDatabase} from \"../../db\"\nconst MockRedis = require('ioredis-mock')\n\n\n\nconst mockRedis = new MockRedis()\nconst agreementBucket = new AgreementBucket(mockRedis)\n\ndescribe('Getting an Intent', () => {\n\n  let app: App\n  let db: Knex\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete() // clean up db after test\n    await db.destroy()\n  })\n\n  test('does not leak secret for an un-managed intent', async () => {\n    const intent = await Agreement.query().insertAndFetch({ scope: '$wallet.example.alice', assetCode: 'USD', assetScale: 2, secret: 'secret', secretSalt: 'salt', type: 'intent' })\n\n    const { data } = await axios.get(`http://localhost:4000/intents/${intent.id}`)\n\n    expect(data.secret).not.toBeDefined()\n    expect(data.secretSalt).toEqual('salt')\n    expect(data.secretHash).toEqual(createHmac('SHA256', 'salt').update('secret').digest('base64'))\n  })\n\n  test(\n    'shows the balance as how much has been \"taken\" from the agreement bucket',\n    async () => {\n      const intent = await Agreement.query().insertAndFetch({ scope: '$wallet.example.alice', assetCode: 'USD', assetScale: 2, secret: 'secret', secretSalt: 'salt', start: Date.now(), type: 'intent' })\n\n      const response = await axios.get(`http://localhost:4000/intents/${intent.id}`)\n      expect(response.data.balance).toEqual(0)\n\n      await agreementBucket.take(intent, 10)\n\n      const response2 = await axios.get(`http://localhost:4000/intents/${intent.id}`)\n      expect(response2.data.balance).toEqual(10)\n    }\n  )\n\n  test(\n    'sets the destination to <configured address>.intents.<intent id>',\n    async () => {\n      const intent = await Agreement.query().insertAndFetch({ scope: '$wallet.example.alice', assetCode: 'USD', assetScale: 2, callback: 'http://localhost:3000/ilpcallback', type: 'intent' })\n\n      const { data } = await axios.get(`http://localhost:4000/intents/${intent.id}`)\n\n      expect(data.secret).not.toBeDefined()\n      expect(data.destination).toEqual(`test.wallet.intents.${intent.id}`)\n    }\n  )\n\n  test('returns 404 for a mandate id', async () => {\n    const mandate = await Agreement.query().insertAndFetch({ scope: '$wallet.example/bob', amount: '100', assetCode: 'USD', assetScale: 2, userId: 5, type: 'mandate' })\n\n    try {\n      await axios.get(`http://localhost:4000/intents/${mandate.id}`)\n    } catch (error) {\n      expect(error.response.status).toEqual(404)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n})\n"]}