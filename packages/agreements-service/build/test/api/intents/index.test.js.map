{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../../../test/api/intents/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { createHmac } from 'crypto'\nimport { App, Agreement } from '../../../src'\nimport { AgreementBucket } from '../../../src/services/agreementBucket'\nimport Knex = require(\"knex\")\nimport {refreshDatabase} from \"../../db\"\nconst MockRedis = require('ioredis-mock')\n\n\nconst mockRedis = new MockRedis()\nconst agreementBucket = new AgreementBucket(mockRedis)\n\ndescribe('Getting an Intent', () => {\n\n  let app: App\n  let managedIntent: Agreement\n  let unmanagedIntent: Agreement\n  let db: Knex\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n    await Agreement.query().insert({ assetCode: 'USD', assetScale: 2, callback: 'http://localhost:3000/ilpcallback', scope: '$wallet.example.com/alice', userId: 1, type: 'intent' })\n    await Agreement.query().insert({ assetCode: 'USD', assetScale: 2, amount: '500', scope: '$wallet.example.com/alice', userId: 1, type: 'mandate' })\n    managedIntent = await Agreement.query().insertAndFetch({ assetCode: 'USD', assetScale: 2, callback: 'http://localhost:3000/ilpcallback', scope: '$wallet.example.com/alice', userId: 2, type: 'intent' })\n    unmanagedIntent = await Agreement.query().insertAndFetch({ assetCode: 'USD', assetScale: 2, secret: 'secret', secretSalt: 'salt', scope: '$wallet.example.com/alice', userId: 2, type: 'intent' })\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete() // clean up db after test\n    await db.destroy()\n  })\n\n  test('can retrieve intents for a user\\'s wallet account', async () => {\n    const { data } = await axios.get('http://localhost:4000/intents?userId=2')\n\n    expect(data.length).toBe(2)\n    expect([data[0].id, data[1].id]).toEqual([managedIntent.id, unmanagedIntent.id])\n    const returnedManagedIntent = data[0].id === managedIntent.id ? data[0] : data[1]\n    const returnedUnmanagedIntent = data[1].id === unmanagedIntent.id ? data[1] : data[0]\n    expect(returnedManagedIntent.destination).toEqual(`test.wallet.intents.${managedIntent.id}`)\n    expect(returnedManagedIntent.balance).toEqual(0)\n\n    expect(returnedUnmanagedIntent.destination).toEqual(`test.wallet.intents.${unmanagedIntent.id}`)\n    expect(returnedUnmanagedIntent.balance).toEqual(0)\n    expect(returnedUnmanagedIntent.secret).not.toBeDefined()\n    expect(returnedUnmanagedIntent.secretSalt).toEqual('salt')\n    expect(returnedUnmanagedIntent.secretHash).toEqual(createHmac('SHA256', 'salt').update('secret').digest('base64'))\n  })\n})\n"]}