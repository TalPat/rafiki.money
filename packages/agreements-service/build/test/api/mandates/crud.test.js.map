{"version":3,"file":"crud.test.js","sourceRoot":"","sources":["../../../../test/api/mandates/crud.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { App, Agreement } from '../../../src'\nimport { AgreementBucket } from '../../../src/services/agreementBucket'\nimport Knex from 'knex'\nimport { refreshDatabase } from '../../db'\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst MockRedis = require('ioredis-mock')\n\nconst mockRedis = new MockRedis()\nconst agreementBucket = new AgreementBucket(mockRedis)\n\ndescribe('Create mandate', () => {\n  let app: App\n  let db: Knex\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete() // clean up db after test\n    await db.destroy()\n  })\n\n  test('can create mandate without user and account', async () => {\n    const postData = {\n      description: 'Test transaction',\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500'\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.amount).toEqual('500')\n    expect(data.asset).toEqual({ scale: 2, code: 'USD' })\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.amount).toEqual('500')\n    expect(mandate!.description).toEqual('Test transaction')\n    expect(mandate!.assetCode).toEqual('USD')\n    expect(mandate!.assetScale).toEqual(2)\n  })\n\n  test('can create mandate with user and account', async () => {\n    const postData = {\n      description: 'Test transaction',\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500',\n      userId: '1',\n      accountId: '1',\n      subject: 'awesome-service'\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.amount).toEqual('500')\n    expect(data.asset).toEqual({ scale: 2, code: 'USD' })\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.amount).toEqual('500')\n    expect(mandate!.description).toEqual('Test transaction')\n    expect(mandate!.assetCode).toEqual('USD')\n    expect(mandate!.assetScale).toEqual(2)\n    expect(mandate!.userId).toEqual(1)\n    expect(mandate!.accountId).toEqual(1)\n    expect(mandate!.subject).toEqual('awesome-service')\n  })\n\n  test('defaults the start of the mandate to now', async () => {\n    const dateNowSpy = jest.spyOn(Date, 'now').mockImplementation(() => 1434412800000)\n\n    const postData = {\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500'\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.start).toEqual(1434412800000)\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.start).toEqual(1434412800000)\n    dateNowSpy.mockRestore()\n  })\n\n  test('sets the start of the mandate to the given start time', async () => {\n    const postData = {\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500',\n      start: 1434412800000\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.start).toEqual(1434412800000)\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.start).toEqual(1434412800000)\n  })\n\n  test('defaults expiry null', async () => {\n    const dateNowSpy = jest.spyOn(Date, 'now').mockImplementation(() => 1434412800000)\n\n    const postData = {\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500'\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.expiry).toEqual(undefined)\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.expiry).toEqual(null)\n    dateNowSpy.mockRestore()\n  })\n\n  test('sets the expiry to the given expiry', async () => {\n    const postData = {\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500',\n      expiry: 1434412800000\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.expiry).toEqual(1434412800000)\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.expiry).toEqual(1434412800000)\n  })\n\n  test('sets the scope to the given scope', async () => {\n    const postData = {\n      scope: '$wallet.example/alice',\n      asset: {\n        scale: 2,\n        code: 'USD'\n      },\n      amount: '500',\n      expiry: 1434412800000\n    }\n    expect(await Agreement.query()).toEqual([])\n\n    const { status, data } = await axios.post('http://localhost:4000/mandates', postData)\n\n    expect(status).toEqual(201)\n    expect(data.expiry).toEqual(1434412800000)\n\n    const mandate = await Agreement.query().where('id', data['id']).first()\n    expect(mandate).toBeDefined()\n    expect(mandate!.isMandate()).toBe(true)\n    expect(mandate!.scope).toEqual('$wallet.example/alice')\n  })\n})\n\ndescribe('Edit mandate', () => {\n  let db: Knex\n  let app: App\n  let mandate: Agreement\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n    mandate = await Agreement.query().insertAndFetch({ amount: '100', assetCode: 'USD', assetScale: 2, type: 'mandate' })\n    await Agreement.query().insertAndFetch({ amount: '100', assetCode: 'USD', assetScale: 2, userId: 5, type: 'mandate' })\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete() // clean up db after test\n    await db.destroy()\n  })\n\n  test('can edit userId', async () => {\n    expect(mandate.userId).toBeNull()\n\n    const { status, data } = await axios.patch('http://localhost:4000/mandates/' + mandate.id, {\n      userId: 4\n    })\n\n    expect(status).toEqual(200)\n    expect(data.userId).toEqual(4)\n    const editedMandate = await mandate.$query()\n    expect(editedMandate.isMandate()).toBe(true)\n    expect(editedMandate.userId).toEqual(4)\n    expect(editedMandate.accountId).toBeNull()\n    expect(editedMandate.amount).toEqual(mandate.amount)\n    expect(editedMandate.assetCode).toEqual(mandate.assetCode)\n    expect(editedMandate.assetScale).toEqual(mandate.assetScale)\n  })\n\n  test('can edit accountId', async () => {\n    expect(mandate.userId).toBeNull()\n\n    const { status, data } = await axios.patch('http://localhost:4000/mandates/' + mandate.id, {\n      accountId: 3\n    })\n\n    expect(status).toEqual(200)\n    expect(data.accountId).toEqual(3)\n    const editedMandate = await mandate.$query()\n    expect(editedMandate.accountId).toEqual(3)\n    expect(editedMandate.userId).toBeNull()\n    expect(editedMandate.amount).toEqual(mandate.amount)\n    expect(editedMandate.assetCode).toEqual(mandate.assetCode)\n    expect(editedMandate.assetScale).toEqual(mandate.assetScale)\n  })\n\n  test('can edit scope', async () => {\n    expect(mandate.scope).toBeNull()\n\n    const { status, data } = await axios.patch('http://localhost:4000/mandates/' + mandate.id, {\n      scope: 'https://wallet.example/alice'\n    })\n\n    expect(status).toEqual(200)\n    expect(data.scope).toEqual('https://wallet.example/alice')\n    const editedMandate = await mandate.$query()\n    expect(editedMandate.scope).toEqual('https://wallet.example/alice')\n    expect(editedMandate.userId).toBeNull()\n    expect(editedMandate.amount).toEqual(mandate.amount)\n    expect(editedMandate.assetCode).toEqual(mandate.assetCode)\n    expect(editedMandate.assetScale).toEqual(mandate.assetScale)\n  })\n\n  test('cant edit other fields', async () => {\n    try {\n      await axios.patch('http://localhost:4000/mandates/' + mandate.id, {\n        start: Date.now(),\n        expiry: Date.now()\n      })\n    } catch (error) {\n      expect(error.response.status).toEqual(400)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n\n  test('cant edit an intent', async () => {\n    const intent = await Agreement.query().insertAndFetch({ scope: '$wallet.example/alice', callback: 'http://localhost:3000/ilpcallback', assetCode: 'USD', assetScale: 2, type: 'intent' })\n\n    try {\n      await axios.patch('http://localhost:4000/mandates/' + intent.id, {})\n    } catch (error) {\n      expect(error.response.status).toEqual(404)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n})\n"]}