{"version":3,"file":"cancel.test.js","sourceRoot":"","sources":["../../../../test/api/mandates/cancel.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { App, Agreement } from '../../../src'\nimport { AgreementBucket } from '../../../src/services/agreementBucket'\nimport Knex from 'knex'\nimport { refreshDatabase } from '../../db'\n\nconst MockRedis = require('ioredis-mock')\n\nconst mockRedis = new MockRedis()\nconst agreementBucket = new AgreementBucket(mockRedis)\n\ndescribe('Cancel mandate', () => {\n  let db: Knex\n  let app: App\n  let mandate: Agreement\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n    mandate = await Agreement.query().insertAndFetch({\n      amount: '100',\n      assetCode: 'USD',\n      assetScale: 2,\n      type: 'mandate'\n    })\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete()\n    await db.destroy()\n  })\n\n  test('cancel a valid mandate should return 200', async () => {\n    let timestamp = new Date().getTime()\n\n    const { status, data } = await axios.patch(\n      'http://localhost:4000/mandates/' + mandate.id,\n      {\n        cancelled: timestamp\n      }\n    )\n\n    expect(status).toEqual(200)\n    expect(data.cancelled).toEqual(timestamp)\n    const editedMandate = await mandate.$query()\n    expect(editedMandate.isMandate()).toBe(true)\n    expect(editedMandate.accountId).toBeNull()\n    expect(editedMandate.amount).toEqual(mandate.amount)\n    expect(editedMandate.assetCode).toEqual(mandate.assetCode)\n    expect(editedMandate.assetScale).toEqual(mandate.assetScale)\n  })\n\n  test('cancel a non-existant mandate should return 404', async () => {\n    let timestamp = new Date().getTime()\n\n    try {\n      await axios.patch('http://localhost:4000/mandates/123', {\n        cancelled: timestamp\n      })\n    } catch (error) {\n      const { status } = error.response\n      expect(status).toEqual(404)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n\n  test('cancel a mandate that has already been cancelled should rerturn 400', async () => {\n    let timestamp = new Date().getTime()\n    let cancelledmandate = await Agreement.query().insertAndFetch({\n      amount: '100',\n      assetCode: 'USD',\n      assetScale: 2,\n      type: 'mandate',\n      cancelled: timestamp\n    })\n\n    try {\n      await axios.patch(\n        'http://localhost:4000/mandates/' + cancelledmandate.id,\n        {\n          cancelled: timestamp\n        }\n      )\n    } catch (error) {\n      const { status } = error.response\n      expect(status).toEqual(400)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n})\n\ndescribe('retrieve agreements by state', () => {\n  let db: Knex\n  let app: App\n  let normalMandate: Agreement\n  let expiredMandate: Agreement\n\tlet cancelledMandate: Agreement\n\tlet timestamp = new Date().getTime()\n\tlet testUserId = 5\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n\t\t// functional\n    normalMandate = await Agreement.query().insertAndFetch({\n      amount: '100',\n      assetCode: 'USD',\n      assetScale: 2,\n      userId: testUserId,\n\t\t\ttype: 'mandate',\n\t\t\texpiry: timestamp + 1000000\n    })\n\t\t// expired\n    expiredMandate = await Agreement.query().insertAndFetch({\n      amount: '100',\n      assetCode: 'USD',\n      assetScale: 2,\n      userId: testUserId,\n      type: 'mandate',\n\t\t\texpiry: timestamp - 1000\n    })\n\t\t// cancelled\n    cancelledMandate = await Agreement.query().insertAndFetch({\n      amount: '100',\n      assetCode: 'USD',\n      assetScale: 2,\n      userId: testUserId,\n\t\t\ttype: 'mandate',\n\t\t\tcancelled: timestamp,\n\t\t\texpiry: timestamp + 1000000\n    })\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete()\n    await db.destroy()\n  })\n\n\ttest('retirieving valid agreement should have matching ids and return 200', async () => {\n    const { status, data } = await axios.get(\n      `http://localhost:4000/mandates/?userId=${testUserId}&state=active`\n    )\n\n\t\tconsole.log(`http://localhost:4000/mandates/?userId=${testUserId}&state=active`,data, normalMandate)\n\n\t\texpect(status).toEqual(200)\n\t\texpect(data.length).toEqual(1)\n    expect(data[0].id).toEqual(normalMandate.id)\n  })\n\n\ttest('retirieving expired agreement should have matching ids and return 200', async () => {\n    const { status, data } = await axios.get(\n      `http://localhost:4000/mandates/?userId=${testUserId}&state=expired`\n    )\n\n\t\tconsole.log(data)\n\n\t\texpect(status).toEqual(200)\n\t\texpect(data.length).toEqual(1)\n    expect(data[0].id).toEqual(expiredMandate.id)\n\t})\n\n\ttest('retirieving cancelled agreement should have matching ids and return 200', async () => {\n    const { status, data } = await axios.get(\n      `http://localhost:4000/mandates/?userId=${testUserId}&state=cancelled`\n    )\n\n\t\tconsole.log(data)\n\t\texpect(status).toEqual(200)\n\t\texpect(data.length).toEqual(1)\n    expect(data[0].id).toEqual(cancelledMandate.id)\n\t})\n\n})\n"]}