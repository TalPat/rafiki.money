{"version":3,"file":"show.test.js","sourceRoot":"","sources":["../../../../test/api/mandates/show.test.ts"],"names":[],"mappings":";;;;;AAAA,kDAAyB;AACzB,sCAA6C;AAC7C,2EAAuE;AAEvE,iCAAwC;AACxC,MAAM,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AAEzC,MAAM,SAAS,GAAG,IAAI,SAAS,EAAE,CAAA;AACjC,MAAM,eAAe,GAAG,IAAI,iCAAe,CAAC,SAAS,CAAC,CAAA;AAEtD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,GAAQ,CAAA;IACZ,IAAI,OAAkB,CAAA;IACtB,IAAI,EAAQ,CAAA;IAEZ,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,EAAE,GAAG,MAAM,oBAAe,EAAE,CAAA;QAC5B,GAAG,GAAG,IAAI,SAAG,CAAC,eAAe,CAAC,CAAA;QAC9B,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAChB,OAAO,GAAG,MAAM,eAAS,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA;QAC9K,MAAM,eAAS,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAA;IACxJ,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,GAAG,CAAC,QAAQ,EAAE,CAAA;QACd,MAAM,eAAS,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAA;QAChC,MAAM,EAAE,CAAC,OAAO,EAAE,CAAA;IACpB,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;QAC5C,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,iCAAiC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAA;QAExF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;QAC3B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QACnC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC3C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,CAAA;QAClF,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAC3C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;QACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACvD,IAAI;YACF,MAAM,eAAK,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAA;SACtD;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAA;YACjC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YAC3B,OAAM;SACP;QAED,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,MAAM,GAAG,MAAM,eAAS,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,QAAQ,EAAE,mCAAmC,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;QAEzL,IAAI;YACF,MAAM,eAAK,CAAC,GAAG,CAAC,iCAAiC,GAAG,MAAM,CAAC,EAAE,CAAC,CAAA;SAC/D;QAAC,OAAO,KAAK,EAAE;YACd,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAA;YACjC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;YAC3B,OAAM;SACP;QAED,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC1B,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["import axios from 'axios'\nimport { App, Agreement } from '../../../src'\nimport { AgreementBucket } from '../../../src/services/agreementBucket'\nimport Knex from \"knex\"\nimport {refreshDatabase} from \"../../db\"\nconst MockRedis = require('ioredis-mock')\n\nconst mockRedis = new MockRedis()\nconst agreementBucket = new AgreementBucket(mockRedis)\n\ndescribe('Show mandate', () => {\n  let app: App\n  let mandate: Agreement\n  let db: Knex\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucket)\n    app.listen(4000)\n    mandate = await Agreement.query().insertAndFetch({ scope: '$wallet.example/alice', amount: '100', assetCode: 'USD', assetScale: 2, userId: 4, accountId: 3, type: 'mandate' })\n    await Agreement.query().insertAndFetch({ scope: '$wallet.example/alice', amount: '100', assetCode: 'USD', assetScale: 2, userId: 5, type: 'mandate' })\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete()\n    await db.destroy()\n  })\n\n  test('can retrieve mandate by id', async () => {\n    const { status, data } = await axios.get('http://localhost:4000/mandates/' + mandate.id)\n\n    expect(status).toEqual(200)\n    expect(data.id).toEqual(mandate.id)\n    expect(data.amount).toEqual(mandate.amount)\n    expect(data.asset).toEqual({ code: mandate.assetCode, scale: mandate.assetScale })\n    expect(data.userId).toEqual(mandate.userId)\n    expect(data.accountId).toEqual(mandate.accountId)\n    expect(data.balance).toEqual(100)\n  })\n\n  test('returns 404 if mandate does not exist', async () => {\n    try {\n      await axios.get('http://localhost:4000/mandates/123')\n    } catch (error) {\n      const { status } = error.response\n      expect(status).toEqual(404)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n\n  test('returns 404 if id belongs to an intent', async () => {\n    const intent = await Agreement.query().insertAndFetch({ scope: '$wallet.example/alice', callback: 'http://localhost:3000/ilpcallback', assetCode: 'USD', assetScale: 2, type: 'intent' })\n\n    try {\n      await axios.get('http://localhost:4000/mandates/' + intent.id)\n    } catch (error) {\n      const { status } = error.response\n      expect(status).toEqual(404)\n      return\n    }\n\n    expect(false).toBe(true)\n  })\n})\n"]}