{"version":3,"file":"agreementTransaction.test.js","sourceRoot":"","sources":["../../../test/api/agreementTransaction.test.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { App, Agreement } from '../../src'\nimport { AgreementBucketMock } from \"../mocks/agreementBucketMock\";\nimport { refreshDatabase } from \"../db\"\nimport Knex = require(\"knex\")\n\nconst agreementBucketMock = new AgreementBucketMock()\n\ndescribe('Agreement Transaction', () => {\n  let app: App\n  let agreement: Agreement\n\tlet db: Knex\n\tlet cancelledAgreement: Agreement\n\tlet timestamp = new Date().getTime()\n\n  beforeEach(async () => {\n    db = await refreshDatabase()\n    app = new App(agreementBucketMock)\n    app.listen(4000)\n\t\tagreement = await Agreement.query().insertAndFetch({ amount: '100', assetCode: 'USD', assetScale: 2, userId: 4, accountId: 3 })\n\t\tcancelledAgreement = await Agreement.query().insertAndFetch({ amount: '100', assetCode: 'USD', assetScale: 2, userId: 4, accountId: 3, cancelled: timestamp })\n  })\n\n  afterEach(async () => {\n    app.shutdown()\n    await Agreement.query().delete()\n    await db.destroy()\n  })\n\n  test('Posting transaction with available amount returns 201', async () => {\n    const { status } = await axios.post(`http://localhost:4000/agreements/${agreement.id}/transactions`, {\n      amount: 50\n    })\n\n    expect(status).toEqual(201)\n  })\n\n  test('Posting transaction with not available amount returns 403', async () => {\n    try {\n      const { status } = await axios.post(`http://localhost:4000/agreements/${agreement.id}/transactions`, {\n        amount: 200\n      })\n    } catch (error) {\n      const { status } = error.response\n      expect(status).toEqual(403)\n      return\n    }\n\n    expect(false).toBe(true)\n\t})\n\t\n\ttest('Posting a transaction that is cancelled returns 403', async () => {\n    try {\n      const { status } = await axios.post(`http://localhost:4000/agreements/${cancelledAgreement.id}/transactions`, {\n        amount: 10\n      })\n    } catch (error) {\n      const { status } = error.response\n      expect(status).toEqual(403)\n      return\n    }\n\n    expect(false).toBe(true)\n\t})\n})\n"]}