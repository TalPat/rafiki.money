{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../test/logger/index.ts"],"names":[],"mappings":";;;;;;;;;AAIA,iDAAkC;AAClC,mCAAgD;AAEhD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;IACjC,QAAQ,EAAE,CAAC,GAAW,EAAE,KAAU,EAAE,EAAE;QACpC,OAAO,OAAO,KAAK,KAAK,QAAQ;YAC9B,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;YAClB,CAAC,CAAC,KAAK,CAAA;IACX,CAAC;CACF,CAAC,CAAA;AAGF,UAAU,CAAC,GAAG,EAAE;IACd,IAAI,MAAiB,CAAA;IAErB,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,IAAI,oBAAW,EAAE,CAAA;QAC1B,MAAM,CAAC,KAAK,EAAE,CAAA;QAGd,OAAO,CAAC,SAAS,CAAC;YAChB,KAAK,EAAE,OAAO;YACd,MAAM;YACN,UAAU,EAAE,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;SAC9D,CAAC,CAAA;IACJ,CAAC,CAAC,CAAA;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,IAAG,IAAI,IAAI,IAAI,CAAC,WAAW;eACpB,IAAI,CAAC,WAAW,CAAC,KAAK,KAAK,QAAQ;eACnC,MAAM,CAAC,cAAc,GAAG,CAAC,EAAE;YAE9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAA;YACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAA;YAC3C,MAAM,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAA;YACxC,MAAM,CAAC,GAAG,EAAE,CAAA;SACf;IACH,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","sourcesContent":["/**\n * Module \"required\" by Mocha which sets global hooks to override logging output\n */\n\nimport * as winston from 'winston'\nimport { PassThrough, Transform } from 'stream';\n\nconst format = winston.format.json({\n  replacer: (key: string, value: any) => {\n    return typeof value === 'bigint'\n      ? value.toString()\n      : value\n  }\n})\n\n// Async so that we let Mocha load before these are executed\nsetTimeout(() => {\n  let stream: Transform\n\n  beforeEach(() => {\n    stream = new PassThrough()\n    stream.pause()\n\n    // TODO: Clears all transports - we should try to do this in a reversible way\n    winston.configure({\n      level: 'silly',\n      format,\n      transports: new winston.transports.Stream({ stream, format })\n    })\n  })\n  \n  afterEach(() => {\n    if(this && this.currentTest \n        && this.currentTest.state !== 'passed'\n        && stream.readableLength > 0) {\n      \n        process.stderr.write(\"==== LOGS: start ====\\r\\n\")\n        stream.pipe(process.stderr, { end: false })\n        stream.write(\"<==== LOGS: end ====\\r\\n\")\n        stream.end()\n    }\n  })\n})\n"]}