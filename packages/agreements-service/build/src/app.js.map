{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/app.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,8CAAkC;AAClC,oEAAqD;AACrD,oEAAuC;AACvC,wDAA2B;AAC3B,+BAA2C;AAC3C,mGAAyF;AACzF,uCAA+B;AAC/B,mFAAoE;AACpE,qFAAsE;AACtE,+FAAgF;AAEhF,6EAA8D;AAC9D,gFAAiE;AAEjE,MAAM,MAAM,GAAG,aAAG,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAA;AAM9C,MAAa,GAAG;IAKd,YAAqB,gBAA0C;QAA1C,qBAAgB,GAAhB,gBAAgB,CAA0B;QAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,aAAG,EAAmB,CAAA;QAEtC,IAAI,CAAC,OAAO,GAAG,wBAAY,EAAE,CAAA;QAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAI,EAAE,CAAC,CAAA;QACrB,IAAI,CAAC,YAAY,EAAE,CAAA;QACnB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,wBAAU,EAAE,CAAC,CAAA;QAC3B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,CAAA;QACxC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAA;IAC3D,CAAC;IAEM,MAAM,CAAE,IAAY;QACzB,MAAM,CAAC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,CAAA;QAC7C,IAAI,CAAC,OAAO,GAAG,mBAAY,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAChE,CAAC;IAEM,QAAQ;QACb,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAA;SACrB;IACH,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,uCAAgB,CAAC,CAAA;QACnE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,EAAE,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAA,CAAC,CAAC,CAAC,CAAA;QAE7D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAA;QACrD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,KAAK,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAA;QAC9E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAA;QAExD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAClF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAA;QACvD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,EAAE,kBAAkB,CAAC,MAAM,EAAE,kBAAkB,CAAC,MAAM,CAAC,CAAA;QACzF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,kBAAkB,CAAC,IAAI,CAAC,CAAA;QAE1D,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAAE,uBAAuB,CAAC,KAAK,CAAC,CAAA;IACzE,CAAC;CACF;AA1CD,kBA0CC","sourcesContent":["import Koa, { Context } from 'koa'\nimport createRouter, { Router } from 'koa-joi-router'\nimport bodyParser from 'koa-bodyparser'\nimport cors from 'koa-cors'\nimport { Server, createServer } from 'http'\nimport { store as storeTransaction } from './controllers/agreementsTransactionController'\nimport { log } from './winston'\nimport * as IntentsController from './controllers/intentsController'\nimport * as MandatesController from './controllers/mandatesController'\nimport * as MandatesSpendController from './controllers/mandatesSpendController'\nimport { AgreementBucketInterface } from './services/agreementBucket'\nimport * as IntentValidation from './route-validation/intents'\nimport * as MandatesValidation from './route-validation/mandates'\n\nconst logger = log.child({ component: 'App' })\n\nexport interface AppContext extends Context {\n  agreementBucket: AgreementBucketInterface;\n}\n\nexport class App {\n  private _koa: Koa\n  private _router: Router\n  private _server: Server\n\n  constructor (private _agreementBucket: AgreementBucketInterface) {\n    this._koa = new Koa<any, AppContext>()\n\n    this._router = createRouter()\n    this._koa.use(cors())\n    this._setupRoutes()\n    this._koa.use(bodyParser())\n    this._koa.use(this._router.middleware())\n    this._koa.context.agreementBucket = this._agreementBucket\n  }\n\n  public listen (port: number): void {\n    logger.info('App listening on port: ' + port)\n    this._server = createServer(this._koa.callback()).listen(port)\n  }\n\n  public shutdown (): void {\n    if (this._server) {\n      this._server.close()\n    }\n  }\n\n  private _setupRoutes (): void {\n    this._router.post('/agreements/:id/transactions', storeTransaction)\n    this._router.get('/', (ctx: Context) => { ctx.status = 200 })\n\n    this._router.get('/intents', IntentsController.index)\n    this._router.post('/intents', IntentValidation.store, IntentsController.store)\n    this._router.get('/intents/:id', IntentsController.show)\n\n    this._router.post('/mandates', MandatesValidation.store, MandatesController.store)\n    this._router.get('/mandates', MandatesController.index)\n    this._router.patch('/mandates/:id', MandatesValidation.update, MandatesController.update)\n    this._router.get('/mandates/:id', MandatesController.show)\n\n    this._router.post('/mandates/:id/spend', MandatesSpendController.store)\n  }\n}\n"]}