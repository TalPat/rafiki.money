{"version":3,"file":"agreementBucket.js","sourceRoot":"","sources":["../../../src/services/agreementBucket.ts"],"names":[],"mappings":"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","sourcesContent":["import { Agreement } from '../models'\nimport { Redis } from 'ioredis'\nimport * as fs from 'fs'\nimport * as path from 'path'\nimport { parse, toSeconds } from 'iso8601-duration'\n\nexport interface AgreementBucketInterface {\n  getFillLevel: (agreement: Agreement) => Promise<number>;\n  take: (agreement: Agreement, amount: number) => void;\n}\n\nexport class AgreementBucket implements AgreementBucketInterface {\n  constructor (private _redis: Redis, private _namespace: string = 'agreements') {\n    this._redis.defineCommand('take', {\n      numberOfKeys: 2,\n      lua: fs.readFileSync(path.resolve(__dirname, 'take.lua')).toString()\n    })\n    this._redis.defineCommand('getBalance', {\n      numberOfKeys: 2,\n      lua: fs.readFileSync(path.resolve(__dirname, 'agreement-balance.lua')).toString()\n    })\n  }\n\n  async getFillLevel (agreement: Agreement): Promise<number> {\n    const balanceKey = `${this._namespace}:${agreement.id}:balance`\n    const intervalKey = `${this._namespace}:${agreement.id}:timestamp`\n    const intervalStart = agreement.interval ? this.currentIntervalStart(agreement.start, agreement.interval, agreement.cycles) : agreement.start\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    return this._redis.getBalance(balanceKey, intervalKey, intervalStart)\n  }\n\n  async take (agreement: Agreement, amount: number): Promise<void> {\n    const balanceKey = `${this._namespace}:${agreement.id}:balance`\n    const intervalKey = `${this._namespace}:${agreement.id}:timestamp`\n\n    const intervalStart = agreement.interval ? this.currentIntervalStart(agreement.start, agreement.interval, agreement.cycles) : agreement.start\n    const maxAmount = agreement.amount\n\n    if (this.hasExpired(agreement.expiry)) {\n      throw new Error('Agreement Expired')\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore\n    const result = await this._redis.take(balanceKey, intervalKey, maxAmount, intervalStart, amount)\n    if (result === 0) {\n      throw new Error('No funds available for interval')\n    }\n  }\n\n  // async available (agreement: Agreement): Promise<void> {\n  //   return Promise.resolve(agreement.accountId)\n  // }\n\n  private hasExpired (expiry: number | null): boolean {\n    return expiry !== null && Date.now() >= expiry\n  }\n\n  private currentIntervalStart (start: number, interval: string, cycles: number): number {\n    const currentTime = Date.now()\n    const timeElapsedSinceStart = currentTime - start\n    const duration = toSeconds(parse(interval)) * 1000\n\n    const elapsedCycles = timeElapsedSinceStart / duration\n\n    // Check if we have exceeded the allowable cycles\n    if (cycles !== null && elapsedCycles > cycles) {\n      throw new Error('Exceeded agreement allowable cycles')\n    }\n\n    return start + duration * Math.floor(elapsedCycles)\n  }\n}\n"]}