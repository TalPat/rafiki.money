{"version":3,"file":"stream.js","sourceRoot":"","sources":["../../../src/services/stream.ts"],"names":[],"mappings":";;;;;AAAA,8CAAqB;AACrB,sDAAiD;AACjD,6DAAsD;AAEtD,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,wBAAwB,CAAA;AAOhE,QAAA,GAAG,GAAG,KAAK,EAAE,WAAmB,EAAE,MAAc,EAAE,SAAiB,EAAE,kBAA0B,EAAE,YAAoB,EAAgB,EAAE;IAClJ,IAAI;QAEF,MAAM,GAAG,GAAG,cAAc,GAAG,eAAe,WAAW,MAAM,CAAA;QAC7D,MAAM,MAAM,GAAG,IAAI,wBAAU,CAAC,GAAG,EAAE,SAAS,CAAC,CAAA;QAC7C,MAAM,UAAU,GAAG,MAAM,sCAAgB,CAAC;YACxC,MAAM;YACN,kBAAkB;YAClB,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC;SAClD,CAAC,CAAA;QAEF,MAAM,MAAM,GAAG,UAAU,CAAC,YAAY,EAAE,CAAA;QAExC,MAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QAC9B,MAAM,MAAM,CAAC,GAAG,EAAE,CAAA;KACnB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,CAAA;KACpB;AACH,CAAC,CAAA;AAEY,QAAA,mBAAmB,GAAG,KAAK,EAAE,cAAsB,EAAyB,EAAE;IACzF,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC;QACrD,CAAC,CAAC,UAAU,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,cAAc,CAAC,CAAA;IAEnB,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,KAAK,GAAG;QAC3C,CAAC,CAAC,kBAAkB;QACpB,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAA;IAErB,MAAM,QAAQ,GAAG,MAAM,aAAG,CAAC,QAAQ,CAAC,IAAI,EAAE;QACxC,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,EAAC,MAAM,EAAE,+CAA+C,EAAC;KACnE,CAAC,CAAA;IAEF,IAAI,QAAQ,CAAC,UAAU,KAAK,GAAG,EAAE;QAC/B,MAAM,IAAI,KAAK,CAAC,+CAA+C;YAC7D,aAAa,GAAG,QAAQ,CAAC,IAAI,GAAG,GAAG;YACnC,UAAU,GAAG,QAAQ,CAAC,UAAU;YAChC,YAAY,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,GAAG,CAAC,CAAA;KACzD;IAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAA;IAEhC,OAAO;QACL,kBAAkB,EAAE,IAAI,CAAC,mBAAmB;QAC5C,YAAY,EAAE,IAAI,CAAC,aAAa;KACjC,CAAA;AACH,CAAC,CAAA","sourcesContent":["import got from 'got'\nimport { HttpPlugin } from '../utils/http-plugin'\nimport { createConnection } from 'ilp-protocol-stream'\n\nconst ILP_UPLINK_URL = process.env.ILP_UPLINK_URL || 'https://localhost:3001'\n\nexport type SPSPResponse = {\n  destinationAccount: string;\n  sharedSecret: string;\n}\n\nexport const Pay = async (agreementId: string, amount: string, authToken: string, destinationAccount: string, sharedSecret: string): Promise<any> => {\n  try {\n    // Build the URL\n    const URL = ILP_UPLINK_URL + `/agreements/${agreementId}/ilp`\n    const plugin = new HttpPlugin(URL, authToken)\n    const connection = await createConnection({\n      plugin,\n      destinationAccount,\n      sharedSecret: Buffer.from(sharedSecret, 'base64')\n    })\n\n    const stream = connection.createStream()\n\n    await stream.sendTotal(amount)\n    await stream.end()\n  } catch (e) {\n    throw new Error('')\n  }\n}\n\nexport const queryPaymentPointer = async (paymentPointer: string): Promise<SPSPResponse> => {\n  const endpoint = new URL(paymentPointer.startsWith('$')\n    ? 'https://' + paymentPointer.substring(1)\n    : paymentPointer)\n\n  endpoint.pathname = endpoint.pathname === '/'\n    ? '/.well-known/pay'\n    : endpoint.pathname\n\n  const response = await got(endpoint.href, {\n    json: true,\n    headers: {accept: 'application/spsp4+json, application/spsp+json'}\n  })\n\n  if (response.statusCode !== 200) {\n    throw new Error('got error response from spsp payment pointer.' +\n      ' endpoint=\"' + endpoint.href + '\"' +\n      ' status=' + response.statusCode +\n      ' message=\"' + (await response.body.toString()) + '\"')\n  }\n\n  const json = await response.body\n\n  return {\n    destinationAccount: json.destination_account,\n    sharedSecret: json.shared_secret\n  }\n}\n"]}