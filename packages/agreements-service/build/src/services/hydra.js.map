{"version":3,"file":"hydra.js","sourceRoot":"","sources":["../../../src/services/hydra.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport querystring from 'querystring'\n\nconst hydraUrl = process.env.HYDRA_URL || 'http://localhost:9000'\nconst hydraAdminUrl = process.env.HYDRA_ADMIN_URL || 'http://localhost:9001'\nlet mockTlsTermination = {}\nconst MOCK_TLS_TERMINATION = process.env.MOCK_TLS_TERMINATION || 'true'\nif (MOCK_TLS_TERMINATION) {\n  mockTlsTermination = {\n    'X-Forwarded-Proto': 'https'\n  }\n}\n\ntype Flow = 'login' | 'consent' | 'logout'\ntype Action = 'accept' | 'reject'\n\n// A little helper that takes type (can be \"login\" or \"consent\") and a challenge and returns the response from ORY Hydra.\nfunction get (flow: Flow, challenge: string): Promise<any> {\n  const url = new URL('/oauth2/auth/requests/' + flow, hydraAdminUrl)\n  url.search = querystring.stringify({ [flow + '_challenge']: challenge })\n  return axios.get(url.toString(), {\n    headers: mockTlsTermination,\n    timeout: 5000\n  }).then(res => {\n    return res.data\n  })\n}\n\n// A little helper that takes type (can be \"login\" or \"consent\"), the action (can be \"accept\" or \"reject\") and a challenge and returns the response from ORY Hydra.\nfunction put (flow: Flow, action: Action, challenge: string, body: any): Promise<any> {\n  const url = new URL('/oauth2/auth/requests/' + flow + '/' + action, hydraAdminUrl)\n  url.search = querystring.stringify({ [flow + '_challenge']: challenge })\n  const headers = Object.assign({ 'Content-Type': 'application/json' }, mockTlsTermination)\n  return axios.put(url.toString(), body, {\n    headers,\n    timeout: 5000\n  }).then(res => res.data)\n}\n\nexport const hydra = {\n  // Fetches information on a login request.\n  getLoginRequest: function (challenge: string): Promise<any> {\n    return get('login', challenge)\n  },\n  // Accepts a login request.\n  acceptLoginRequest: function (challenge: string, body: any): Promise<any> {\n    return put('login', 'accept', challenge, body)\n  },\n  // Rejects a login request.\n  rejectLoginRequest: function (challenge: string, body: any): Promise<any> {\n    return put('login', 'reject', challenge, body)\n  },\n  // Fetches information on a consent request.\n  getConsentRequest: function (challenge: string): Promise<any> {\n    return get('consent', challenge)\n  },\n  // Accepts a consent request.\n  acceptConsentRequest: function (challenge: string, body: any): Promise<any> {\n    return put('consent', 'accept', challenge, body)\n  },\n  // Rejects a consent request.\n  rejectConsentRequest: function (challenge: string, body: any): Promise<any> {\n    return put('consent', 'reject', challenge, body)\n  },\n  // Fetches information on a logout request.\n  getLogoutRequest: function (challenge: string): Promise<any> {\n    return get('logout', challenge)\n  },\n  // Accepts a logout request.\n  acceptLogoutRequest: function (challenge: string): Promise<any> {\n    return put('logout', 'accept', challenge, {})\n  },\n  // Reject a logout request.\n  rejectLogoutRequest: function (challenge: string): Promise<any> {\n    return put('logout', 'reject', challenge, {})\n  },\n  // Introspects the token\n  introspectToken: function (token: string): Promise<any> {\n    const url = new URL('/oauth2/introspect', hydraAdminUrl)\n    const introspectParams = new URLSearchParams()\n    introspectParams.set('token', token)\n    const headers = Object.assign({ 'Content-Type': 'application/x-www-form-urlencoded' }, mockTlsTermination)\n    return axios.post(url.href, introspectParams, { headers }).then(resp => resp.data)\n  },\n  createToken: function (params: URLSearchParams): Promise<any> {\n    const url = new URL('/oauth2/token', hydraUrl)\n    return axios.post(url.toString(), params, {\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    }).then(resp => resp.data)\n  }\n}\n"]}