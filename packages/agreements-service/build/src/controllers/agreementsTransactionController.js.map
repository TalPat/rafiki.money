{"version":3,"file":"agreementsTransactionController.js","sourceRoot":"","sources":["../../../src/controllers/agreementsTransactionController.ts"],"names":[],"mappings":";;AAAA,wCAAgC;AAEhC,sCAAqC;AAErC,MAAM,MAAM,GAAG,aAAG,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,mCAAmC,EAAE,CAAC,CAAA;AAOrE,KAAK,UAAU,KAAK,CAAE,GAAe;IAC1C,MAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;IAC9G,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC5C,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAA;IACnC,IAAI;QACF,MAAM,SAAS,GAAG,MAAM,kBAAS,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,KAAK,EAAE,CAAA;QAC5E,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;QACtD,IAAI,SAAS,CAAC,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;QAG7D,MAAM,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;QAEjD,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAA;KAC1B;IAAC,OAAO,KAAK,EAAE;QAChB,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QACzB,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAA;KAC1B;AACH,CAAC;AAjBD,sBAiBC","sourcesContent":["import { log } from '../winston'\nimport { AppContext } from '../app'\nimport { Agreement } from '../models'\n\nconst logger = log.child({ component: 'Agreements Transaction Controller' })\n\n/**\n * Attempt to add a new transaction by using the agreement bucket bound to the ctx.\n * If Successful returns 201, if no funds available/error it throws a 404\n * @param ctx\n */\nexport async function store (ctx: AppContext): Promise<void> {\n  logger.debug('Create agreement transaction request', { body: ctx.request.body, headers: ctx.request.headers })\n  const agreementId = ctx.request.params['id']\n  const { amount } = ctx.request.body\n  try {\n    const agreement = await Agreement.query().where('id', agreementId).first()\n\t\tif (!agreement) throw new Error('agreement not found')\n\t\tif (agreement.cancelled) throw new Error('cancelled agreement')\n\n    // Attempt to take from agreement bucket\n    await ctx.agreementBucket.take(agreement, amount)\n\n    ctx.response.status = 201\n  } catch (error) {\n\t\tlogger.error(error.message)\n    ctx.response.status = 403\n  }\n}\n"]}