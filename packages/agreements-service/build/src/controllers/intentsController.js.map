{"version":3,"file":"intentsController.js","sourceRoot":"","sources":["../../../src/controllers/intentsController.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomBytes } from 'crypto'\nimport { log } from '../winston'\nimport { AppContext } from '../app'\nimport { Agreement } from '../models'\n\nconst logger = log.child({ component: 'Intents Controller' })\nconst HOST = process.env.HOST || 'http://localhost:4000'\nconst INTENT_ILP_BASE_ADDRESS = process.env.INTENT_ILP_BASE_ADDRESS || 'test.wallet'\n\nexport async function store (ctx: AppContext): Promise<void> {\n  logger.debug('Create intent request', { body: ctx.request.body, headers: ctx.request.headers })\n\n  try {\n    const { amount, asset: { scale, code }, secret, scope, callback } = ctx.request.body\n    const salt = secret ? randomBytes(32).toString('base64') : undefined\n    const start = new Date().getTime()\n    const expiry = new Date(Date.now() + 60 * 60 * 1000).getTime()\n    const agreement = await Agreement.query().insertAndFetch({ assetCode: code, assetScale: scale, amount, start, expiry, secret, secretSalt: salt, scope, callback, type: 'intent' })\n    const intentUrl = new URL(`/intents/${agreement.id}`, HOST)\n    const destination = `${INTENT_ILP_BASE_ADDRESS}.intents.${agreement.id}`\n\n    ctx.response.status = 201\n    ctx.set('location', intentUrl.toString())\n    ctx.body = Object.assign(agreement.$toJson(), { destination })\n  } catch (error) {\n    logger.error(error.message)\n    throw error\n  }\n}\n\nexport async function show (ctx: AppContext): Promise<void> {\n  logger.debug('Show intent request', { path: ctx.request.path, headers: ctx.request.headers })\n\n  const agreementId = ctx.request.params['id']\n  const agreement = await Agreement.query().where('id', agreementId).andWhere('type', 'intent').first()\n\n  if (!agreement) {\n    ctx.response.status = 404\n    ctx.response.message = 'No intent found'\n    return\n  }\n\n  ctx.body = Object.assign(agreement.$toJson(), { balance: await ctx.agreementBucket.getFillLevel(agreement), destination: `${INTENT_ILP_BASE_ADDRESS}.intents.${agreementId}` })\n}\n\nexport async function index (ctx: AppContext): Promise<void> {\n  logger.debug('Index intents request', { query: ctx.request.query, headers: ctx.request.headers })\n\n  const userId = ctx.request.query['userId']\n  const agreements = await Agreement.query().where('userId', userId).andWhere('type', 'intent').orderBy('createdAt', 'desc')\n  const transform = async (agreement: Agreement): Promise<any> => {\n    const balance = Number(agreement.amount) - (await ctx.agreementBucket.getFillLevel(agreement))\n    const destination = `${INTENT_ILP_BASE_ADDRESS}.intents.${agreement.id}`\n\n    return Object.assign(agreement.$formatJson(), { balance, destination })\n  }\n\n  ctx.body = await Promise.all(agreements.map(transform))\n}\n"]}