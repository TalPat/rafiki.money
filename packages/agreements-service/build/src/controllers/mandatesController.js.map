{"version":3,"file":"mandatesController.js","sourceRoot":"","sources":["../../../src/controllers/mandatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { log } from '../winston'\nimport { AppContext } from '../app'\nimport { Agreement } from '../models'\n\nconst logger = log.child({ component: 'Agreements Controller' })\n\nexport async function index (ctx: AppContext): Promise<void> {\n  const userId = ctx.request.query['userId']\n  const state = ctx.request.query['state']\n\n  const query = Agreement.query().where('userId', userId).andWhere('type', 'mandate').orderBy('createdAt', 'desc')\n\n  const now = new Date(Date.now()).getTime()\n\n  if (state) {\n    switch (state) {\n      case ('active'):\n\t\t\t\tquery.where('expiry', '>', now)\n\t\t\t\t.whereNull('cancelled')\n        break\n      case ('expired'):\n        query.where('expiry', '<=', now)\n\t\t\t\tbreak\n\t\t\tcase ('cancelled'):\n\t\t\t\tquery.where('cancelled', '<=', now)\n\t\t\t\tbreak\n      default:\n        throw new Error('Unknown state')\n    }\n  }\n\n  const agreements = await query\n\n  ctx.body = await Promise.all(agreements.map(async agreement => Object.assign(agreement.$toJson(), { balance: Number(agreement.amount) - (await ctx.agreementBucket.getFillLevel(agreement)) })))\n}\n\nexport async function show (ctx: AppContext): Promise<void> {\n  logger.debug('Show agreement request', { path: ctx.request.path, body: ctx.request.body, headers: ctx.request.headers })\n  const mandateId = ctx.request.params['id']\n  const mandate = await Agreement.query().where('id', mandateId).andWhere('type', 'mandate').first()\n\n  if (!mandate) {\n    ctx.response.status = 404\n    ctx.response.message = 'No mandate found'\n    return\n  }\n\n  ctx.body = Object.assign(mandate.$toJson(), { balance: Number(mandate.amount) - (await ctx.agreementBucket.getFillLevel(mandate)) })\n}\n\nexport async function store (ctx: AppContext): Promise<void> {\n  logger.debug('Create mandate request', { body: ctx.request.body, headers: ctx.request.headers })\n\n  try {\n    const { asset: { scale, code }, scope, amount, description, start, expiry, cycles, interval, cap, subject, userId, accountId } = ctx.request.body\n    const startEpoch = start || new Date(Date.now()).getTime()\n    const expiryEpoch = expiry || null\n\n    // TODO validate user owns account\n\n    const mandate = await Agreement.query().insertAndFetch({ assetCode: code, assetScale: scale, description, amount, start: startEpoch, expiry: expiryEpoch, type: 'mandate', cycles, interval, cap, scope, subject, userId, accountId })\n\n    ctx.response.status = 201\n    ctx.body = mandate.$toJson()\n  } catch (error) {\n    logger.error(error.message)\n    throw error\n  }\n}\n\nexport async function update (ctx: AppContext): Promise<void> {\n  logger.debug('Update mandate request', { body: ctx.request.body, headers: ctx.request.headers })\n\n  try {\n    const mandate = await Agreement.query().where('id', ctx.request.params['id']).andWhere('type', 'mandate').first()\n    if (!mandate) {\n      ctx.response.status = 404\n      ctx.response.message = 'No mandate found'\n      return\n\t\t}\n\t\tif (mandate.cancelled) {\n      ctx.response.status = 400\n      ctx.response.message = 'Cancelled mandate'\n      return\n\t\t}\n\n    // TODO validate user owns account\n    const { userId, accountId, scope, cancelled } = ctx.request.body\n    const updatedData = {}\n    if (userId) updatedData['userId'] = userId\n    if (accountId) updatedData['accountId'] = accountId\n\t\tif (scope) updatedData['scope'] = scope\n\t\tif (cancelled) updatedData['cancelled'] = cancelled\n\n    logger.debug('updating mandate', { updatedData })\n    const updatedMandate = await mandate.$query().updateAndFetch(updatedData)\n    ctx.body = updatedMandate.$toJson()\n  } catch (error) {\n    logger.error(error.message)\n    ctx.response.status = 400\n    ctx.body = 'Can only update userId and accountId'\n  }\n}\n"]}