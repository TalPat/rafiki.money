{"version":3,"file":"mandatesSpendController.js","sourceRoot":"","sources":["../../../src/controllers/mandatesSpendController.ts"],"names":[],"mappings":";;AACA,sCAAqC;AACrC,wCAAgC;AAChC,+CAA6D;AAE7D,MAAM,MAAM,GAAG,aAAG,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,2BAA2B,EAAE,CAAC,CAAA;AAE7D,KAAK,UAAU,KAAK,CAAE,GAAe;IAC1C,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAA;IAC/F,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAA;IAEvB,IAAI;QACF,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAC1C,MAAM,OAAO,GAAG,MAAM,kBAAS,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,KAAK,EAAE,CAAA;QAGlG,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAA;QAEnC,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAA;QAEnD,IAAI,CAAC,OAAO,EAAE;YACZ,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAA;YACzB,GAAG,CAAC,QAAQ,CAAC,OAAO,GAAG,kBAAkB,CAAA;YACzC,OAAM;SACP;QAED,MAAM,WAAW,GAAG,MAAM,4BAAmB,CAAC,cAAc,CAAC,CAAA;QAE7D,IAAI;YACF,MAAM,YAAG,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,CAAC,kBAAkB,EAAE,WAAW,CAAC,YAAY,CAAC,CAAA;SAClG;QAAC,OAAM,KAAK,EAAE;YACb,MAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,EAAE,KAAK,EAAE,CAAC,CAAA;SACjD;QAED,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAA;KAC1B;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QAC3B,MAAM,KAAK,CAAA;KACZ;AACH,CAAC;AAhCD,sBAgCC;AAED,MAAM,QAAQ,GAAG,CAAC,MAAW,EAAE,EAAE;IAC/B,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,EAAE;QAClC,MAAM,KAAK,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC7C,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;YAC/C,OAAO,KAAK,CAAC,CAAC,CAAC,CAAA;SAChB;KACF;AACH,CAAC,CAAA","sourcesContent":["import { AppContext } from '../app'\nimport { Agreement } from '../models'\nimport { log } from '../winston'\nimport { queryPaymentPointer, Pay } from '../services/stream'\n\nconst logger = log.child({ component: 'Mandates Spend Controller' })\n\nexport async function store (ctx: AppContext): Promise<void> {\n  logger.debug('Mandate spend request', { body: ctx.request.body, headers: ctx.request.headers })\n  const { headers } = ctx\n\n  try {\n    const mandateId = ctx.request.params['id']\n    const mandate = await Agreement.query().where('id', mandateId).andWhere('type', 'mandate').first()\n\n    // TODO enforce authz\n    const authToken = getToken(headers)\n\n    const { paymentPointer, amount } = ctx.request.body\n\n    if (!mandate) {\n      ctx.response.status = 404\n      ctx.response.message = 'No mandate found'\n      return\n    }\n\n    const spspDetails = await queryPaymentPointer(paymentPointer)\n\n    try {\n      await Pay(mandateId, amount, authToken, spspDetails.destinationAccount, spspDetails.sharedSecret)\n    } catch(error) {\n      logger.error('Error sending payment', { error })\n    }\n\n    ctx.response.status = 201\n  } catch (error) {\n    logger.error(error.message)\n    throw error\n  }\n}\n\nconst getToken = (header: any) => {\n  if (header && header.authorization) {\n    const parts = header.authorization.split(' ')\n    if (parts.length === 2 && parts[0] === 'Bearer') {\n      return parts[1]\n    }\n  }\n}\n"]}