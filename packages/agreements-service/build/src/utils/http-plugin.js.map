{"version":3,"file":"http-plugin.js","sourceRoot":"","sources":["../../../src/utils/http-plugin.ts"],"names":[],"mappings":";;;;;AAAA,mCAAqC;AACrC,kDAAyB;AAIzB,MAAa,UAAW,SAAQ,qBAAY;IAI1C,YAAqB,YAAoB,EAAU,kBAA0B;QAC3E,KAAK,EAAE,CAAA;QADY,iBAAY,GAAZ,YAAY,CAAQ;QAAU,uBAAkB,GAAlB,kBAAkB,CAAQ;IAE7E,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,IAAI,CAAC,UAAU;YAAE,OAAM;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;IACtB,CAAC;IAED,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,IAAI,CAAC,UAAU;YAAE,OAAM;QAE5B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QACvB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IACzB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAE,IAAY;QAC1B,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;SAC5C;QAED,OAAO,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,EAAE;YACzC,YAAY,EAAE,aAAa;YAC3B,OAAO,EAAE;gBACP,cAAc,EAAE,0BAA0B;gBAC1C,aAAa,EAAE,UAAU,IAAI,CAAC,kBAAkB,EAAE;aACnD;SACF,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA;IACpC,CAAC;IAGD,WAAW;QACT,OAAO,IAAI,CAAC,UAAU,CAAA;IACxB,CAAC;IAED,mBAAmB,CAAE,OAAsB;QACzC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAA;IAC7B,CAAC;IAED,qBAAqB;QACnB,OAAO,IAAI,CAAC,YAAY,CAAA;IAC1B,CAAC;IAED,oBAAoB;IAEpB,CAAC;IAED,sBAAsB;IACtB,CAAC;IAED,KAAK,CAAC,SAAS;IAEf,CAAC;CACF;AA1DD,gCA0DC","sourcesContent":["import { EventEmitter } from 'events'\nimport axios from 'axios'\n\ntype PacketHandler = (data: Buffer) => Promise<Buffer>\n\nexport class HttpPlugin extends EventEmitter {\n  private _connected: boolean\n  private _dataHandler?: PacketHandler\n\n  constructor (private _outgoingUrl: string, private _outgoingAuthToken: string) {\n    super()\n  }\n\n  async connect (): Promise<void> {\n    if (this._connected) return\n    this._connected = true\n    this.emit('connect')\n  }\n\n  async disconnect (): Promise<void> {\n    if (!this._connected) return\n\n    this._connected = false\n    this.emit('disconnect')\n  }\n\n  async sendData (data: Buffer): Promise<Buffer> {\n    if (!this._connected) {\n      throw new Error('plugin is not connected.')\n    }\n\n    return axios.post(this._outgoingUrl, data, {\n      responseType: 'arraybuffer',\n      headers: {\n        'content-type': 'application/octet-stream',\n        authorization: `Bearer ${this._outgoingAuthToken}`\n      }\n    }).then(response => response.data)\n  }\n\n  // boilerplate methods\n  isConnected (): boolean {\n    return this._connected\n  }\n\n  registerDataHandler (handler: PacketHandler) {\n    this._dataHandler = handler\n  }\n\n  deregisterDataHandler (): void {\n    delete this._dataHandler\n  }\n\n  registerMoneyHandler (): void {\n\n  }\n\n  deregisterMoneyHandler (): void {\n  }\n\n  async sendMoney (): Promise<void> {\n\n  }\n}\n"]}